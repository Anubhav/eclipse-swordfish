/*******************************************************************************
 * Copyright (c) 2007 Deutsche Post AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *    Deutsche Post AG - initial API and implementation
 ******************************************************************************/
package org.eclipse.swordfish.papi.internal.untyped;

import javax.security.auth.Subject;
import javax.xml.namespace.QName;
import org.eclipse.swordfish.papi.internal.InternalCommunicationStyle;

/**
 * This interface represents the context of a particular call to a service operation and enables
 * access to the information associated with it.
 * 
 * A <code>InternalCallContext</code> is valid within the scope of a service operation invocation
 * and carries metadata related to the invocation.
 * 
 */
public interface InternalCallContext {

    /**
     * 
     * This method returns the {@link javax.security.auth.Subject} that authenticates the caller
     * (the initiator of the message).
     * 
     * @return The subject.
     */
    Subject getCallerSubject();

    /**
     * This method returns the {@link org.eclipse.swordfish.papi.InternalCommunicationStyle}
     * associated with the <code>InternalCallContext</code>. Possible values are
     * Request-Response, Oneway, Notification, or Request-Callback.
     * 
     * @return The InternalCommunicationStyle of the operation associated with the context.
     */
    InternalCommunicationStyle getCommunicationStyle();

    /**
     * This methods returns a <code>ConsumerCallIdentifier</code> that has been set by a consumer
     * application for later correlation of the <code>InternalCallContext</code> of this message.
     * <p>
     * For each request and corresponding response, a consumer call identifier set in the context of
     * the request can be found again by the same participant in the context of the corresponding
     * response.
     * </p>
     * 
     * @return The value of the user correlation identifier or <code>null</code> if none has been
     *         set.
     * 
     */
    String getConsumerCallIdentifier();

    /**
     * This method returns the <code>CorrelationID</code> for the given
     * <code>InternalCallContext</code>. The correlationID is an identifier created by the
     * InternalSBB that is shared among all messages that form part of a message exchange.
     * 
     * <p>
     * A correlationID is an opaque string. It is restricted to a length of at most 128 characters.
     * A correlationID is case sensitive. It is automatically generated by InternalSBB and assigned
     * for each invocation of an operation. A correlationID is guaranteed to be unique within one
     * SOP instance and will never be reused for further invocations.
     * </p>
     * 
     * @return The correlation identifier.
     */
    String getCorrelationID();

    /**
     * 
     * This method returns the <code>MessageID</code> for the given
     * <code>InternalCallContext</code>. This is the identifier given by the InternalSBB to the
     * message just sent.
     * 
     * <p>
     * A messageID uniquely identifies a message which is sent from one participant to another
     * participant.
     * </p>
     * <p>
     * A messageID is an opaque string. It is restricted to a length of 128 characters. A messageID
     * is case sensitive. It is automatically generated by InternalSBB and assigned to each message.
     * A messageID is guaranteed to be unique within one SOP instance and will never be reused for
     * further messages.
     * </p>
     * 
     * @return The identifier.
     */
    String getMessageID();

    /**
     * This method returns the <code>InternalOperation Name</code> for the given
     * <code>InternalCallContext</code>. The service operation name is either the target or the
     * origin of messages in the present context.
     * 
     * <p>
     * An operation name uniquely identifies a service operation within a service.
     * </p>
     * <p>
     * An operation name must be a valid XML non colonized name (xsd:NCName). An operation name is
     * case sensitive. InternalOperation names must be unique within one service (for different
     * services there may be operations with the same operation name).
     * </p>
     * <p>
     * Usage: An operation name will be defined during service design by a service designer. Within
     * a service description file (sdx) operation names are defined as a name attribute of operation
     * elements.
     * </p>
     * 
     * @return The operation name the method invocation was intended to hit.
     */
    String getOperationName();

    /**
     * This method returns the <code>ProviderID</code> for the given
     * <code>InternalCallContext</code>. A SOP service is a set of SOP application instances that
     * implement a service according to one or more well-defined QoS policies. A SOP ProviderID
     * corresponds to a WSDL <code>service</code> QName.
     * <p>
     * Note: The return value of this object is only valid if the authentication took place already,
     * which is always the case when a provider receives a message.
     * </p>
     * 
     * <p>
     * A providerID identifies one provider of a given service. Provider IDs must be unique.<br>
     * The providerID gives no relation to applications or instances because a provider might choose
     * to implement the provided service by creating and operating different applications for each
     * operation of the service.
     * </p>
     * <p>
     * A providerID is an XML qualified name. It must be a valid non colonized name (xsd:NCName). A
     * providerID is case sensitive.
     * </p>
     * <p>
     * Usage: A providerID is defined during the creation of a provider description.
     * <ul>
     * <li>Within a service provider description file (spdx) a providerID is given as a name
     * attribute of the service element.</li>
     * <li>Within untyped PAPI a providerID needs to be submitted for looking up a service
     * skeleton.</li>
     * <li>Within untyped PAPI the providerID can be queried from service proxies and skeletons to
     * get knowledge of the bound provider. </li>
     * </ul>
     * </p>
     * 
     * @return The service provider identifier.
     */
    QName getProviderID();

    /**
     * This method returns the provider <code>ProviderPolicyID</code> for the given
     * <code>InternalCallContext</code>. A service provider policy is the logical name of a
     * policy under which a service provider offers a service.
     * <p>
     * The provider policy ID may be <code>null</code> if no message has been sent in the present
     * context, and therefore no provider and no policy have been selected yet.
     * </p>
     * 
     * <p>
     * A policyID must be a valid XML name token (xsd:NMTOKEN). A policyID is case sensitive.
     * PolicyIDs must be unique within the set of defined participant policies of one participant.
     * For different participants there may be participant policies with the same policyID.
     * </p>
     * A policyID is defined during the creation of a participant configuration by an administrator.
     * 
     * @return The provider policy identifier
     */
    String getProviderPolicyID();

    /**
     * <p>
     * Get all relations of this call context to previous messages. Context relations are set up
     * either automatically by InternalSBB or explicitly by the InternalSBB developer when an
     * existing InternalCallContext is passed to one of the methods for invoking a service
     * operation.
     * </p>
     * <p>
     * The result may be an empty array but will never be null.
     * </p>
     * <p>
     * A relation is created
     * <ul>
     * <li>for each response to the initiating request with relationtype "Request"</li>
     * <li>for each callback to the initiating oneway with relationtype "Oneway"</li>
     * <li>for each request, oneway or notification if issued with a <code>contextToRelateTo</code>,
     * the relation will be of type "TriggeringCall" and reference the messageID from the
     * contextToRelateTo</li>
     * </ul>
     * </p>
     * 
     * @return Array of Relations. First is direct relation of this call. Subsequent relations
     *         identify the Relation of the predecessor.
     * 
     * @see InternalCallRelation
     * @see org.eclipse.swordfish.papi.untyped.consumer.InternalOnewayOperationProxy#callNonBlocking(InternalOutgoingMessage,
     *      String, InternalCallContext)
     * @see org.eclipse.swordfish.papi.untyped.consumer.InternalOnewayOperationProxy#callbackNonBlocking(InternalOutgoingMessage,
     *      InternalCallContext)
     * @see org.eclipse.swordfish.papi.untyped.consumer.InternalRequestResponseOperationProxy#callBlocking(InternalOutgoingMessage,
     *      InternalCallContext)
     * @see org.eclipse.swordfish.papi.untyped.consumer.InternalRequestResponseOperationProxy#callNonBlocking(InternalOutgoingMessage,
     *      String, InternalCallContext)
     * @see org.eclipse.swordfish.papi.untyped.provider.InternalRequestResponseOperationSkeleton#sendResponse(InternalOutgoingMessage,
     *      InternalCallContext)
     */
    InternalCallRelation[] getRelations();

    /**
     * This method returns the name of the service associated with the context. The service is
     * either the destination of the message sent in the <code>InternalCallContext</code> or it is
     * the originating source for the message received in the <code>InternalCallContext</code>.
     * 
     * <p>
     * A service name uniquely identifies an abstract service holding the definition of a group of
     * operations with the associated messages. A service name as used by InternalSBB and SOP
     * terminology corresponds to a WSDL 1.1 portType name or a WSDL 2.0 interface name.
     * </p>
     * <p>
     * A service name is an XML qualified name composed from a namespace and a local name. Both
     * parts are restricted by the definitions given in the XML specifications. The local name must
     * be a valid XML non colonized name (xsd:NCName). Both parts are case sensitive. A service name
     * must be globally unique within one SOP instance.<br>
     * </p>
     * <p>
     * Usage: A service name is defined during service design by a service designer.
     * <ul>
     * <li>Within a service description file (sdx) the service name is composed from the
     * <code>targetNamespace</code> attribute of the <code>definitions</code> element and the
     * <code>name</code> attribute of the <code>portType</code> element. </li>
     * <li>Within PAPI the service name is used to lookup service proxies and skeletons.</li>
     * <li>Within a participant policy the service name of the affected service can be found in
     * attributes of the ParticipantPolicy element. </li>
     * </ul>
     * </p>
     * 
     * @return The name of the service that the invoked method is part of.
     * 
     */
    QName getServiceName();

}
