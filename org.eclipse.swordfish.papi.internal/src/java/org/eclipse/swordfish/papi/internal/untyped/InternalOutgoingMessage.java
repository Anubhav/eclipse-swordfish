/*******************************************************************************
 * Copyright (c) 2007 Deutsche Post AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *    Deutsche Post AG - initial API and implementation
 ******************************************************************************/
package org.eclipse.swordfish.papi.internal.untyped;

import java.io.InputStream;
import javax.activation.DataHandler;
import org.eclipse.swordfish.papi.internal.authentication.InternalAuthenticationHandler;
import org.eclipse.swordfish.papi.internal.exception.InternalMessagingException;
import org.eclipse.swordfish.papi.internal.exception.InternalSBBException;

/**
 * This interface contains methods for the business-related contents (payload) of a message.
 * <p>
 * The contents of the outgoing payload are set at
 * {@link org.eclipse.swordfish.papi.untyped.InternalMessageFactory creation}. Binary attachments
 * may be added to the payload after creation.
 * </p>
 * The service description declares:
 * <ul>
 * <li>The XML schema of the payload</li>
 * <li>The number of attachments</li>
 * <li>The type and structure of each attachment</li>
 * </ul>
 * When creating payloads, one should assume that it will be validated against its service
 * description while it is sent.
 * 
 * @see org.eclipse.swordfish.papi.untyped.InternalMessageFactory for a means to create outgoing
 *      messages
 * 
 * 
 */
public interface InternalOutgoingMessage {

    /**
     * This method creates an attachment from a Data Handler.
     * <p>
     * The attachment is not validated against the service description while this method is called.
     * </p>
     * 
     * @param handler
     *        the data handler which contains the attachment
     * @return ID of this attachement within this message. ID is generated by InternalSBB.
     * @throws InternalSBBException
     */
    String addAttachment(DataHandler handler) throws InternalSBBException;

    /**
     * This method creates an attachment from a Data Handler.
     * <p>
     * The attachment is not validated against the service description while this method is called.
     * </p>
     * 
     * @param attachmentId
     *        an identifier that will be used to retrieve this attachment later
     * @param handler
     *        the data handler which contains the attachment
     * @throws InternalSBBException
     */
    void addAttachment(String attachmentId, DataHandler handler) throws InternalSBBException;

    /**
     * This method adds an authentication handler to this particular outgoing message. It works like
     * <code>{@link org.eclipse.swordfish.papi.InternalSBB#addAuthenticationHandler(InternalAuthenticationHandler)}</code>.
     * <p>
     * Note: Authentication handlers registered for a particular message overrule operation, service
     * and InternalSBB level authentication handlers.
     * </p>
     * 
     * @param anAuthenticationHandler
     *        The authentication handler to be added.
     * @throws IllegalArgumentException
     *         if the handed over hanldler is null
     * @throws DuplicateAuthenticationHandlerException
     *         if the same handler should be registered a second time. handler for the same
     *         authentication mechanism is already registered.
     */
    void addAuthenticationHandler(InternalAuthenticationHandler anAuthenticationHandler) throws InternalSBBException;

    /**
     * This method creates an attachment from a byte array.
     * <p>
     * The attachment is not validated against the service description while this method is called.
     * </p>
     * 
     * @param attachedBytes
     *        The bytes to be attached.
     * @throws InternalMessagingException
     * @throws InternalSBBException
     * @deprecated
     */
    @Deprecated
    void attach(byte[] attachedBytes) throws InternalSBBException;

    /**
     * This method creates an attachment from a binary stream such as an image.
     * <p>
     * The stream is accessed while sending the payload. Any problems accessing the stream will
     * occur only at this point.
     * </p>
     * 
     * @param anAttachedStream
     *        The stream that holds the bytes to be attached. This stream must be open at the moment
     *        the payload is send.
     * @throws InternalMessagingException
     * @throws InternalSBBException
     * @deprecated
     */
    @Deprecated
    void attach(InputStream anAttachedStream) throws InternalSBBException;

    /*
     * sets the fault code which is mapped to the faultCode of SOAPFault in the wire representation
     * of this message. If the fault code is not set than default value is <code>server</code>.
     * @param faultCode the value of the fault code @throws InternalMessagingException if the
     * InternalOutgoingMessage is not a fault message.
     */
    /**
     * For future use.
     * 
     * @param faultCode
     * @throws InternalSBBException
     */
    void setFaultCode(String faultCode) throws InternalSBBException;

    /*
     * sets the fault description which is mapped to the faultString of SOAPFault in the wire
     * representation of this message. If the fault description is not set than default value is
     * <code>server</code>. @param faultDescription the value of the fault description @throws
     * InternalMessagingException if the InternalOutgoingMessage is not a fault message.
     */
    /**
     * for future use.
     * 
     * @param faultDescription
     * @throws InternalSBBException
     */
    void setFaultDescription(String faultDescription) throws InternalSBBException;
}
