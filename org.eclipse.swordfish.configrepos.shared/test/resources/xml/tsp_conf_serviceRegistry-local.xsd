<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--============================================================================
    Copyright (c) 2007 Deutsche Post AG.
    All rights reserved. This program and the accompanying materials
    are made available under the terms of the Eclipse Public License v1.0
    which accompanies this distribution, and is available at
    http://www.eclipse.org/legal/epl-v10.html
    
    Contributors:
       Deutsche Post AG - initial API and implementation
 ============================================================================-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
	<xs:annotation>
		<xs:documentation>This is the local configuration for the service registry TSP.</xs:documentation>
	</xs:annotation>
	<!-- START SBB TYPES -->
	<!--attributeGroups -->
	<xs:attributeGroup name="sopConfigAttribGroup">
		<xs:attribute name="sbb_configuration_attribute_added" type="xs:boolean" use="optional"/>
		<xs:attribute name="sbb_configuration_attribute_changed" type="xs:boolean" use="optional"/>
		<xs:attribute name="sbb_configuration_attribute_fixed" type="xs:boolean" use="optional"/>
		<xs:attribute name="sbb_configuration_attribute_final" type="xs:boolean" use="optional"/>
		<xs:attribute name="sbb_configuration_attribute_access" type="xs:string" use="optional"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="sopNamedConfigAttribGroup">
		<xs:attribute name="name" type="xs:string" use="optional" default="default"/>
		<xs:attributeGroup ref="sopConfigAttribGroup"/>
	</xs:attributeGroup>
	<!-- specific simpleTypes -->
	<!-- general complex types for elements holding one config value each -->
	<xs:complexType name="unnamedBooleanConfig">
		<xs:simpleContent>
			<xs:extension base="xs:boolean">
				<xs:attributeGroup ref="sopConfigAttribGroup"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<xs:complexType name="namedBooleanConfig">
		<xs:simpleContent>
			<xs:extension base="xs:boolean">
				<xs:attributeGroup ref="sopNamedConfigAttribGroup"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<xs:complexType name="unnamedStringConfig">
		<xs:simpleContent>
			<xs:extension base="xs:string">
				<xs:attributeGroup ref="sopConfigAttribGroup"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<xs:complexType name="namedStringConfig">
		<xs:simpleContent>
			<xs:extension base="xs:string">
				<xs:attributeGroup ref="sopNamedConfigAttribGroup"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<xs:complexType name="unnamedByteConfig">
		<xs:simpleContent>
			<xs:extension base="xs:byte">
				<xs:attributeGroup ref="sopConfigAttribGroup"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<xs:complexType name="namedByteConfig">
		<xs:simpleContent>
			<xs:extension base="xs:byte">
				<xs:attributeGroup ref="sopNamedConfigAttribGroup"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<xs:complexType name="unnamedIntConfig">
		<xs:simpleContent>
			<xs:extension base="xs:int">
				<xs:attributeGroup ref="sopConfigAttribGroup"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<xs:complexType name="namedIntConfig">
		<xs:simpleContent>
			<xs:extension base="xs:int">
				<xs:attributeGroup ref="sopNamedConfigAttribGroup"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<xs:complexType name="sanitycheckConfig">
		<xs:all>
			<xs:element name="period" type="unnamedByteConfig" default="0">
				<xs:annotation>
					<xs:documentation>The time between two sanity checks. Default is 0 min, means no sanitiy check will be made.
                        </xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="delay" type="unnamedIntConfig" default="30000">
				<xs:annotation>
					<xs:documentation>The time in ms the timer waits before it starts a timer teak. </xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="maxObservationProcessingTime" type="unnamedIntConfig" default="1000">
				<xs:annotation>
					<xs:documentation>The minimal time in ms which a connection to a backend must be available. If it is not possible to
                        create a connection to a backend in the given time, the backend will be declared as dead. </xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:all>
		<xs:attributeGroup ref="sopNamedConfigAttribGroup"/>
	</xs:complexType>
	<xs:simpleType name="authenticationConfig">
		<xs:restriction base="xs:string">
			<xs:enumeration value="none"/>
			<xs:enumeration value="simple"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="namedAuthenticationConfig">
		<xs:simpleContent>
			<xs:extension base="authenticationConfig">
				<xs:attributeGroup ref="sopNamedConfigAttribGroup"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<xs:complexType name="ldapType">
		<xs:all>
			<xs:element name="initial-context-factory" type="unnamedStringConfig" default="com.sun.jndi.ldap.LdapCtxFactory">
				<xs:annotation>
					<xs:documentation>Java class that provides connections to LDAP server via JNDI.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="providerURL" type="xs:anyURI">
				<xs:annotation>
					<xs:documentation>URL of LDAP server, including the root context. The root context is an LDAP DN and separated from
                        the URL by a slash (/).</xs:documentation>
					<xs:documentation>Example: ldap://192.168.100.68:1389/o=ubbrief.deutschepost.de</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="secure-auth" type="authenticationConfig" default="none">
				<xs:annotation>
					<xs:documentation>Level of authentication. If set to 'simple', username/password credentials will be used, if set
                        to 'none', no credentials will be used.</xs:documentation>
					<xs:documentation>Possible values: simple, none</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="bindDN" type="unnamedStringConfig">
				<xs:annotation>
					<xs:documentation>JNDI folder name of the subsystem context (here: Authentication). An LDAP DN is
                        expected.</xs:documentation>
					<xs:documentation>Example: uid=SystemUserAuthenticationTSP</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="bindPassword" type="unnamedStringConfig">
				<xs:annotation>
					<xs:documentation>Password for access to 'bindDN'. Required, if 'secure-auth' is set to
                        'simple'.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:all>
		<xs:attributeGroup ref="sopNamedConfigAttribGroup"/>
	</xs:complexType>
	<xs:complexType name="ldapTypeWithConnectionPool">
		<xs:all>
			<xs:element name="initial-context-factory" type="unnamedStringConfig" default="com.sun.jndi.ldap.LdapCtxFactory">
				<xs:annotation>
					<xs:documentation>Java class that provides connections to LDAP server via JNDI.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="providerURL" type="xs:anyURI">
				<xs:annotation>
					<xs:documentation>URL of LDAP server, including the root context. The root context is an LDAP DN and separated from
                        the URL by a slash (/).</xs:documentation>
					<xs:documentation>Example: ldap://192.168.100.68:1389/o=ubbrief.deutschepost.de</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="secure-auth" type="authenticationConfig" default="none">
				<xs:annotation>
					<xs:documentation>Level of authentication. If set to 'simple', username/password credentials will be used, if set
                        to 'none', no credentials will be used.</xs:documentation>
					<xs:documentation>Possible values: simple, none</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="bindDN" type="unnamedStringConfig">
				<xs:annotation>
					<xs:documentation>JNDI folder name of the subsystem context (here: Authentication). An LDAP DN is
                        expected.</xs:documentation>
					<xs:documentation>Example: uid=SystemUserAuthenticationTSP</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="bindPassword" type="unnamedStringConfig">
				<xs:annotation>
					<xs:documentation>Password for access to 'bindDN'. Required, if 'secure-auth' is set to
                        'simple'.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="connection-pool" type="xs:boolean" default="false" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Flag which controls the pooling behaviour of LDAP connections.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:all>
		<xs:attributeGroup ref="sopNamedConfigAttribGroup"/>
	</xs:complexType>
	<!-- END SBB TYPES -->
	<!--  root element -->
	<xs:element name="configuration">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="config">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="init-param" type="srLocalInitParamType" minOccurs="17" maxOccurs="unbounded"/>
						</xs:sequence>
						<xs:attributeGroup ref="sopNamedConfigAttribGroup"/>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!-- types for complex sub elements -->
	<xs:complexType name="srLocalInitParamType">
		<xs:attribute name="name" use="required">
			<xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="sr.get.base.url">
                        <xs:annotation>
                            <xs:documentation>This parameter is for HTTP access to service registry. The service registry listens at this URL for HTTP GET requests e.g. to retrieve an annotation.</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="sr.post.base.url">
                        <xs:annotation>
                            <xs:documentation>This parameter is for web service access to service registry. The service registry listens at this URL for HTTP POST requests from web service consumers. The request must contain a SOAP envelope containing a request message for a service registry operation that conforms to the service registry service description. The ContentType is text/xml and encoding is UTF-8.</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="uddi.user.name">
                        <xs:annotation>
                            <xs:documentation>This parameter is for the UDDI backend. The user/password combination identified by uddi.user.name and uddi.user.password is used by the service registry TSP during normal operation for read and write access to the UDDI backend. With the standard setup the UDDI server itself uses an LDAP backend for user management. In that case, the user name is a uid on the LDAP backend.</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="uddi.user.pwd">
                        <xs:annotation>
                            <xs:documentation>This parameter is for the UDDI backend. The user/password combination identified by uddi.user.name and uddi.user.password is used by the service registry TSP at runtime for read and write access to the UDDI backend. With the standard setup the UDDI server itself uses an LDAP backend for user management. In that case, the user name is a uid on the LDAP backend.</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="uddi.admin.name">
                        <xs:annotation>
                            <xs:documentation>This parameter is for the UDDI backend. The user/password combination identified by uddi.admin.name and uddi.admin.password is used for setup tasks by the administrator on the command line, e.g for the initial population of the UDDI tModels. This user is not used by the service registry TSP at runtime.</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="uddi.admin.pwd">
                        <xs:annotation>
                            <xs:documentation>This parameter is for the UDDI backend. The user/password combination identified by uddi.admin.name and uddi.admin.password is used for setup tasks by the administrator on the command line, e.g for the initial population of the UDDI tModels. This user is not used by the service registry TSP at runtime.</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="uddi.api.urlstring.inquiry">
                        <xs:annotation>
                            <xs:documentation>This parameter is for the UDDI backend. The URL signifies the location of the inquiry API of the UDDI backend.</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="uddi.api.urlstring.publication">
                        <xs:annotation>
                            <xs:documentation>This parameter is for the UDDI backend. The URL signifies the location of the publication API of the UDDI backend.</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="uddi.api.urlstring.security">
                        <xs:annotation>
                            <xs:documentation>This parameter is for the UDDI backend. The URL signifies the location of the security API of the UDDI backend.</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="uddi.api.urlstring.custody">
                        <xs:annotation>
                            <xs:documentation>This parameter is for the UDDI backend. The URL signifies the location of the custody API of the UDDI backend.</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="storage.ldap.host">
                        <xs:annotation>
                            <xs:documentation>This parameter is for the LDAP storage backend. This parameter signifes the hostname or IP address of the LDAP server that stores service registry data. This may be the same LDAP server as the one for configuration data. For production systems please make sure that the hostname specified can be resolved locally without contacting a DNS server.</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="storage.ldap.port">
                        <xs:annotation>
                            <xs:documentation>This parameter is for the LDAP storage backend. This parameter signifes the port number of the LDAP server that stores service registry data.</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="storage.ldap.bindingDN">
                        <xs:annotation>
                            <xs:documentation>This parameter is for the LDAP storage backend. The user/password combination identified by storage.ldap.bindingDN and storage.ldap.password is used by the service registry TSP during normal operation for read and write access to the LDAP storage backend. The parameter must be a fully qualified LDAP distinguished name (DN).</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="storage.ldap.password">
                        <xs:annotation>
                            <xs:documentation>This parameter is for the LDAP storage backend. The user/password combination identified by storage.ldap.bindingDN and storage.ldap.password is used by the service registry TSP during normal operation for read and write access to the LDAP storage backend. The parameter must be a fully qualified LDAP distinguished name (DN).</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="storage.ldap.baseDN">
                        <xs:annotation>
                            <xs:documentation>This parameter is for the LDAP storage backend. The parameters storage.ldap.baseDN and storage.ldap.containerName indicate the location within the LDAP server structure, that service registry uses as data storage. storage.ldap.baseDN must be a fully qualified LDAP distinguished name (DN), whereas storage.ldap.containerName must be an LDAP organizational unit (ou) that is located directly below storage.ldap.baseDN.</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="storage.ldap.containerName">
                        <xs:annotation>
                            <xs:documentation>This parameter is for the LDAP storage backend. The parameters storage.ldap.baseDN and storage.ldap.containerName indicate the location within the LDAP server structure, that service registry uses as data storage. storage.ldap.baseDN must be a fully qualified LDAP distinguished name (DN), whereas storage.ldap.containerName must be an LDAP organizational unit (ou) that is located directly below storage.ldap.baseDN.</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="policy.load.directory">
                        <xs:annotation>
                            <xs:documentation>This parameter is used for the dynamic policy load mechanism. In case additional policy assertions are required, put the jar files containing the policy assertion classes in this directory. The policy assertions can be loaded using the policy loader bean during runtime of the service registry TSP so that they take effect immediately. The policy assertions will take effect at latest when the service registry TSP is restarted. The directory must exist and must be readable and writable by the user that executes the service registry tomcat process.</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                </xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="value" type="xs:string" use="required"/>
		<xs:attributeGroup ref="sopConfigAttribGroup"/>
	</xs:complexType>
</xs:schema>
