<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--============================================================================
    Copyright (c) 2007 Deutsche Post AG.
    All rights reserved. This program and the accompanying materials
    are made available under the terms of the Eclipse Public License v1.0
    which accompanies this distribution, and is available at
    http://www.eclipse.org/legal/epl-v10.html
    
    Contributors:
       Deutsche Post AG - initial API and implementation
 ============================================================================-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
    <xs:annotation>
        <xs:documentation>This is the remote / fallback configuration for the authorization and privilege management TSPs.</xs:documentation>
    </xs:annotation>
    <!-- START SBB TYPES -->
    <!--attributeGroups -->
    <xs:attributeGroup name="sopConfigAttribGroup">
        <xs:attribute name="sbb_configuration_attribute_added" type="xs:boolean" use="optional"/>
        <xs:attribute name="sbb_configuration_attribute_changed" type="xs:boolean" use="optional"/>
        <xs:attribute name="sbb_configuration_attribute_fixed" type="xs:boolean" use="optional"/>
        <xs:attribute name="sbb_configuration_attribute_final" type="xs:boolean" use="optional"/>
        <xs:attribute name="sbb_configuration_attribute_access" type="xs:string" use="optional"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="sopNamedConfigAttribGroup">
        <xs:attribute name="name" type="xs:string" use="optional" default="default"/>
        <xs:attributeGroup ref="sopConfigAttribGroup"/>
    </xs:attributeGroup>
    <!-- specific simpleTypes -->
    <!-- general complex types for elements holding one config value each -->
    <xs:complexType name="unnamedBooleanConfig">
        <xs:simpleContent>
            <xs:extension base="xs:boolean">
                <xs:attributeGroup ref="sopConfigAttribGroup"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="namedBooleanConfig">
        <xs:simpleContent>
            <xs:extension base="xs:boolean">
                <xs:attributeGroup ref="sopNamedConfigAttribGroup"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="unnamedStringConfig">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attributeGroup ref="sopConfigAttribGroup"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="namedStringConfig">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attributeGroup ref="sopNamedConfigAttribGroup"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="unnamedByteConfig">
        <xs:simpleContent>
            <xs:extension base="xs:byte">
                <xs:attributeGroup ref="sopConfigAttribGroup"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="namedByteConfig">
        <xs:simpleContent>
            <xs:extension base="xs:byte">
                <xs:attributeGroup ref="sopNamedConfigAttribGroup"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="unnamedIntConfig">
        <xs:simpleContent>
            <xs:extension base="xs:int">
                <xs:attributeGroup ref="sopConfigAttribGroup"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="namedIntConfig">
        <xs:simpleContent>
            <xs:extension base="xs:int">
                <xs:attributeGroup ref="sopNamedConfigAttribGroup"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="sanitycheckConfig">
        <xs:all>
            <xs:element name="period" type="unnamedByteConfig" default="0">
                <xs:annotation>
                    <xs:documentation>The time between two sanity checks. Default is 0 min, means no sanitiy check will be made. </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="delay" type="unnamedIntConfig" default="30000">
                <xs:annotation>
                    <xs:documentation>The time in ms the timer waits before it starts a timer teak. </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="maxObservationProcessingTime" type="unnamedIntConfig" default="1000">
                <xs:annotation>
                    <xs:documentation>The minimal time in ms which a connection to a backend must be available. If it is not possible to create a connection to a backend in the given time, the backend will be declared as dead. </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:all>
        <xs:attributeGroup ref="sopNamedConfigAttribGroup"/>
    </xs:complexType>
    <xs:simpleType name="authenticationConfig">
        <xs:restriction base="xs:string">
            <xs:enumeration value="none"/>
            <xs:enumeration value="simple"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="namedAuthenticationConfig">
        <xs:simpleContent>
            <xs:extension base="authenticationConfig">
                <xs:attributeGroup ref="sopNamedConfigAttribGroup"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="ldapType">
        <xs:all>
            <xs:element name="initial-context-factory" type="unnamedStringConfig" default="com.sun.jndi.ldap.LdapCtxFactory">
                <xs:annotation>
                    <xs:documentation>Java class that provides connections to LDAP server via JNDI.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="providerURL" type="xs:anyURI">
                <xs:annotation>
                    <xs:documentation>URL of LDAP server, including the root context. The root context is an LDAP DN and separated from the URL by a slash (/).</xs:documentation>
                    <xs:documentation>Example: ldap://192.168.100.68:1389/o=ubbrief.deutschepost.de</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="secure-auth" type="authenticationConfig" default="none">
                <xs:annotation>
                    <xs:documentation>Level of authentication. If set to 'simple', username/password credentials will be used, if set to 'none', no credentials will be used.</xs:documentation>
                    <xs:documentation>Possible values: simple, none</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="bindDN" type="unnamedStringConfig">
                <xs:annotation>
                    <xs:documentation>JNDI folder name of the subsystem context (here: Authentication). An LDAP DN is expected.</xs:documentation>
                    <xs:documentation>Example: uid=SystemUserAuthenticationTSP</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="bindPassword" type="unnamedStringConfig">
                <xs:annotation>
                    <xs:documentation>Password for access to 'bindDN'. Required, if 'secure-auth' is set to 'simple'.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:all>
        <xs:attributeGroup ref="sopNamedConfigAttribGroup"/>
    </xs:complexType>
    <xs:complexType name="ldapTypeWithConnectionPool">
        <xs:all>
            <xs:element name="initial-context-factory" type="unnamedStringConfig" default="com.sun.jndi.ldap.LdapCtxFactory">
                <xs:annotation>
                    <xs:documentation>Java class that provides connections to LDAP server via JNDI.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="providerURL" type="xs:anyURI">
                <xs:annotation>
                    <xs:documentation>URL of LDAP server, including the root context. The root context is an LDAP DN and separated from the URL by a slash (/).</xs:documentation>
                    <xs:documentation>Example: ldap://192.168.100.68:1389/o=ubbrief.deutschepost.de</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="secure-auth" type="authenticationConfig" default="none">
                <xs:annotation>
                    <xs:documentation>Level of authentication. If set to 'simple', username/password credentials will be used, if set to 'none', no credentials will be used.</xs:documentation>
                    <xs:documentation>Possible values: simple, none</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="bindDN" type="unnamedStringConfig">
                <xs:annotation>
                    <xs:documentation>JNDI folder name of the subsystem context (here: Authentication). An LDAP DN is expected.</xs:documentation>
                    <xs:documentation>Example: uid=SystemUserAuthenticationTSP</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="bindPassword" type="unnamedStringConfig">
                <xs:annotation>
                    <xs:documentation>Password for access to 'bindDN'. Required, if 'secure-auth' is set to 'simple'.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="connection-pool" type="xs:boolean" default="false" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Flag which controls the pooling behaviour of LDAP connections.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:all>
        <xs:attributeGroup ref="sopNamedConfigAttribGroup"/>
    </xs:complexType>
    <!-- END SBB TYPES -->
    <!--  root element -->
    <xs:element name="configuration">
        <xs:complexType>
            <xs:choice minOccurs="8" maxOccurs="unbounded">
                <xs:element name="pmazn-factory" type="namedStringConfig" default="org.sopware.sec.pmazn.impl.ldap.PrivilegeManagementFactoryLdap" minOccurs="0">
                    <xs:annotation>
                        <xs:documentation>Factory class for obtaining a backend reference to the LDAP server.</xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="ldap" type="ldapTypeWithConnectionPool">
                    <xs:annotation>
                        <xs:documentation>Configuration parameters for LDAP access. </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="type" type="typeType">
                    <xs:annotation>
                        <xs:documentation>Configuration parameters for Java entity type to LDAP attribute mapping.</xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="saml" type="samlType">
                    <xs:annotation>
                        <xs:documentation>Configuration parameters for SAML.</xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="sanitycheck" type="sanitycheckConfig">
                    <xs:annotation>
                        <xs:documentation>Configuration parameters for periodic TSP sanity check.</xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:choice>
        </xs:complexType>
    </xs:element>
    <!-- types for complex sub elements -->
    <xs:complexType name="baseAttributeType">
        <xs:attribute name="name" type="xs:string" use="optional"/>
        <xs:attribute name="ldap" type="xs:string"/>
        <xs:attribute name="indexed" type="xs:boolean" use="optional"/>
        <xs:attribute name="optional" type="xs:boolean" use="optional"/>
        <xs:attribute name="key" type="xs:boolean" use="optional"/>
        <xs:attribute name="type" type="xs:string" use="optional"/>
        <xs:attribute name="default" type="xs:string" use="optional"/>
    </xs:complexType>
    <xs:simpleType name="validTypeIDs">
        <xs:restriction base="xs:string">
            <xs:enumeration value="role"/>
            <xs:enumeration value="account"/>
            <xs:enumeration value="resource"/>
            <xs:enumeration value="privilege"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="typeType">
        <xs:sequence>
            <xs:element name="baseDN" type="unnamedStringConfig">
                <xs:annotation>
                    <xs:documentation>Location where to store the Java entity type with given ID within the LDAP server's structure. An LDAP DN is expected.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="objectclass">
                <xs:annotation>
                    <xs:documentation>The name attribute defines to which LDAP attribute the Java entity type maps. The LDAP attribute is either a base LDAP attribute or defined in an LDAP schema. Depending on the entity type ID, several type.objectClass.attribute elements are defined.</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="attribute" type="baseAttributeType" minOccurs="2" maxOccurs="unbounded">
                            <xs:annotation>
                                <xs:documentation>Detail of mapping a Java entity type's property to an LDAP attribute.</xs:documentation>
                            </xs:annotation>
                        </xs:element>
                    </xs:sequence>
                    <xs:attribute name="name" type="xs:string"/>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="name" type="xs:string" use="optional" default="default"/>
        <xs:attribute name="id" type="validTypeIDs" use="required"/>
    </xs:complexType>
    <xs:complexType name="samlType">
        <xs:sequence>
            <xs:element name="general-issuer" type="unnamedStringConfig">
                <xs:annotation>
                    <xs:documentation>This name identifies the SOPware authorization service and is included in all SAML assertions issued by the authorization service.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="keystore">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="name" type="unnamedStringConfig">
                            <xs:annotation>
                                <xs:documentation>The filename of the keystore that contains the private key used by the authorization service to sign SAML assertions.</xs:documentation>
                            </xs:annotation>
                        </xs:element>
                        <xs:element name="password" type="unnamedStringConfig">
                            <xs:annotation>
                                <xs:documentation>The password needed to access the key store.</xs:documentation>
                            </xs:annotation>
                        </xs:element>
                        <xs:element name="certalias" type="unnamedStringConfig">
                            <xs:annotation>
                                <xs:documentation>The key alias name against which the private key and certificate are stored in the keystore.</xs:documentation>
                            </xs:annotation>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="assertion">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="signSerialNumbersOnly" type="unnamedBooleanConfig">
                            <xs:annotation>
                                <xs:documentation>This parameter determines whether the full certificate of the authorization service is included with the SAML assertions it issues; If "true", only the certificate serial number and the issuer name are included, so the receiver needs to have access to the corresponding certificate to verify SAML assertions issued by the authorization service. Setting this parameter to "true" helps reduce the size of SAML assertions at the cost of distributing the authorization service's certificate to all relying parties.</xs:documentation>
                            </xs:annotation>
                        </xs:element>
                        <xs:element name="expires" type="unnamedByteConfig">
                            <xs:annotation>
                                <xs:documentation>This parameter specifies the lifetime of SAML assertions issued by the authorization service in minutes.</xs:documentation>
                            </xs:annotation>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="name" type="xs:string" use="optional" default="default"/>
    </xs:complexType>
</xs:schema>
