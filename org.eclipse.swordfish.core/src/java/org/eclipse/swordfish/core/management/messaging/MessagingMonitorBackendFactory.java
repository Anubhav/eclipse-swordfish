/*******************************************************************************
 * Copyright (c) 2007 Deutsche Post AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *    Deutsche Post AG - initial API and implementation
 ******************************************************************************/
package org.eclipse.swordfish.core.management.messaging;

import org.eclipse.swordfish.core.management.messaging.impl.ExchangeJournal;
import org.eclipse.swordfish.core.management.messaging.impl.MessagingMonitorBackend;
import org.eclipse.swordfish.core.management.notification.EntityStateNotification;

/**
 * The Interface MessagingMonitorBackendFactory.
 * 
 */
public interface MessagingMonitorBackendFactory {

    /**
     * Destroy.
     */
    void destroy();

    /**
     * Gets the backend.
     * 
     * @param protocol
     *        to provide the backend for
     * 
     * @return a <code>MessagingMonitorBackend</code> instance that reports events generated by an
     *         <code>ExchangeJournal</code>
     */
    MessagingMonitorBackend getBackend(ExchangeJournal protocol);

    /**
     * notifies the backend factory that a new service/operation combo has been registered. This can
     * be used by the factory to instantiate the corresponding backend.
     * 
     * @param notification
     *        the notification
     */
    void register(EntityStateNotification notification);

    /**
     * notifies the backend factory that an existing service/operation combo has been unregistered.
     * This can be used by the factory to delete the corresponding backend.
     * 
     * @param notification
     *        the notification
     */
    void unregister(EntityStateNotification notification);

}
