<?xml version="1.0" encoding="UTF-8"?>
<!--============================================================================
    Copyright (c) 2007 Deutsche Post AG.
    All rights reserved. This program and the accompanying materials
    are made available under the terms of the Eclipse Public License v1.0
    which accompanies this distribution, and is available at
    http://www.eclipse.org/legal/epl-v10.html
    
    Contributors:
       Deutsche Post AG - initial API and implementation
 ============================================================================-->
<wsdl:definitions targetNamespace="http://services.sopware.org/registry/ServiceRegistry/1.0" name="ServiceRegistry.sdx" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:tns="http://services.sopware.org/registry/ServiceRegistry/1.0" xmlns:doc="http://types.sopware.org/service/Documentation/1.0" xmlns:sdx="http://types.sopware.org/service/ServiceDescription/2.0" xmlns:uddiv3="urn:uddi-org:api_v3" xmlns:sopa="http://types.sopware.org/qos/SOPAssertions/1.0" xmlns:spol="http://types.sopware.org/qos/SOPPolicy/1.0" xmlns:sr="http://types.sopware.org/registry/ServiceRegistry/1.0" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:svn1="http://types.sopware.org/qos/AgreedPolicy/1.0" xmlns:svn2="http://types.sopware.org/qos/SOPAssertions/1.0" xmlns:svn3="http://types.sopware.org/qos/SOPPolicy/1.0" xmlns:svn4="http://types.sopware.org/qos/ParticipantPolicy/1.1" xmlns:svn8="http://types.sopware.org/service/ServiceDescription/2.0">
	<wsdl:types>
		<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" targetNamespace="http://schemas.xmlsoap.org/wsdl/" elementFormDefault="qualified">
			<xs:complexType mixed="true" name="tDocumentation">
				<xs:sequence>
					<xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax"/>
				</xs:sequence>
			</xs:complexType>
			<xs:complexType name="tDocumented">
				<xs:annotation>
					<xs:documentation>
      This type is extended by  component types to allow them to be documented
      </xs:documentation>
				</xs:annotation>
				<xs:sequence>
					<xs:element name="documentation" type="wsdl:tDocumentation" minOccurs="0"/>
				</xs:sequence>
			</xs:complexType>
			<!-- implemented resolution of swa124 -->
			<xs:complexType name="tExtensibleAttributesDocumented" abstract="true">
				<xs:complexContent>
					<xs:extension base="wsdl:tDocumented">
						<xs:annotation>
							<xs:documentation>
          This type is extended by component types to allow attributes from other namespaces to be added.
          </xs:documentation>
						</xs:annotation>
						<xs:sequence>
							<xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded" processContents="lax"/>
						</xs:sequence>
						<xs:anyAttribute namespace="##other" processContents="lax"/>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
			<!-- implemented resolution of swa124 -->
			<xs:complexType name="tExtensibleDocumented" abstract="true">
				<xs:complexContent>
					<xs:extension base="wsdl:tDocumented">
						<xs:annotation>
							<xs:documentation>
          This type is extended by component types to allow elements from other namespaces to be added.
          </xs:documentation>
						</xs:annotation>
						<xs:sequence>
							<xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded" processContents="lax"/>
						</xs:sequence>
						<xs:anyAttribute namespace="##other" processContents="lax"/>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
			<xs:element name="definitions" type="wsdl:tDefinitions">
				<xs:key name="message">
					<xs:selector xpath="wsdl:message"/>
					<xs:field xpath="@name"/>
				</xs:key>
				<xs:key name="portType">
					<xs:selector xpath="wsdl:portType"/>
					<xs:field xpath="@name"/>
				</xs:key>
				<xs:key name="binding">
					<xs:selector xpath="wsdl:binding"/>
					<xs:field xpath="@name"/>
				</xs:key>
				<xs:key name="service">
					<xs:selector xpath="wsdl:service"/>
					<xs:field xpath="@name"/>
				</xs:key>
				<xs:key name="import">
					<xs:selector xpath="wsdl:import"/>
					<xs:field xpath="@namespace"/>
				</xs:key>
			</xs:element>
			<xs:group name="anyTopLevelOptionalElement">
				<xs:annotation>
					<xs:documentation>
      Any top level optional element allowed to appear more then once - any child of definitions element except wsdl:types. Any extensibility element is allowed in any place.
      </xs:documentation>
				</xs:annotation>
				<xs:choice>
					<xs:element name="import" type="wsdl:tImport"/>
					<xs:element name="types" type="wsdl:tTypes"/>
					<xs:element name="message" type="wsdl:tMessage">
						<xs:unique name="part">
							<xs:selector xpath="wsdl:part"/>
							<xs:field xpath="@name"/>
						</xs:unique>
					</xs:element>
					<xs:element name="portType" type="wsdl:tPortType"/>
					<xs:element name="binding" type="wsdl:tBinding"/>
					<xs:element name="service" type="wsdl:tService">
						<xs:unique name="port">
							<xs:selector xpath="wsdl:port"/>
							<xs:field xpath="@name"/>
						</xs:unique>
					</xs:element>
				</xs:choice>
			</xs:group>
			<!-- implemented resolution of er015 and UPA fix. ASK -->
			<xs:complexType name="tDefinitions">
				<xs:complexContent>
					<xs:extension base="wsdl:tExtensibleDocumented">
						<xs:sequence minOccurs="0">
							<xs:group ref="wsdl:anyTopLevelOptionalElement"/>
							<xs:choice minOccurs="0" maxOccurs="unbounded">
								<xs:group ref="wsdl:anyTopLevelOptionalElement"/>
								<xs:any namespace="##other" processContents="lax"/>
							</xs:choice>
						</xs:sequence>
						<xs:attribute name="targetNamespace" type="xs:anyURI" use="optional"/>
						<xs:attribute name="name" type="xs:NCName" use="optional"/>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
			<xs:complexType name="tImport">
				<xs:complexContent>
					<xs:extension base="wsdl:tExtensibleAttributesDocumented">
						<xs:attribute name="namespace" type="xs:anyURI" use="required"/>
						<xs:attribute name="location" type="xs:anyURI" use="required"/>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
			<xs:complexType name="tTypes">
				<xs:complexContent>
					<xs:extension base="wsdl:tExtensibleDocumented"/>
				</xs:complexContent>
			</xs:complexType>
			<xs:complexType name="tMessage">
				<xs:complexContent>
					<xs:extension base="wsdl:tExtensibleDocumented">
						<xs:sequence>
							<xs:element name="part" type="wsdl:tPart" minOccurs="0" maxOccurs="unbounded"/>
						</xs:sequence>
						<xs:attribute name="name" type="xs:NCName" use="required"/>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
			<xs:complexType name="tPart">
				<xs:complexContent>
					<xs:extension base="wsdl:tExtensibleAttributesDocumented">
						<xs:attribute name="name" type="xs:NCName" use="required"/>
						<xs:attribute name="element" type="xs:QName" use="optional"/>
						<xs:attribute name="type" type="xs:QName" use="optional"/>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
			<xs:complexType name="tPortType">
				<xs:complexContent>
					<xs:extension base="wsdl:tExtensibleAttributesDocumented">
						<xs:sequence>
							<xs:element name="operation" type="wsdl:tOperation" minOccurs="0" maxOccurs="unbounded"/>
						</xs:sequence>
						<xs:attribute name="name" type="xs:NCName" use="required"/>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
			<xs:complexType name="tOperation">
				<xs:complexContent>
					<xs:extension base="wsdl:tExtensibleDocumented">
						<xs:sequence>
							<xs:choice>
								<xs:group ref="wsdl:request-response-or-one-way-operation"/>
								<xs:group ref="wsdl:solicit-response-or-notification-operation"/>
							</xs:choice>
						</xs:sequence>
						<xs:attribute name="name" type="xs:NCName" use="required"/>
						<xs:attribute name="parameterOrder" type="xs:NMTOKENS" use="optional"/>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
			<xs:group name="request-response-or-one-way-operation">
				<xs:sequence>
					<xs:element name="input" type="wsdl:tParam"/>
					<xs:sequence minOccurs="0">
						<xs:element name="output" type="wsdl:tParam"/>
						<xs:element name="fault" type="wsdl:tFault" minOccurs="0" maxOccurs="unbounded"/>
					</xs:sequence>
				</xs:sequence>
			</xs:group>
			<xs:group name="solicit-response-or-notification-operation">
				<xs:sequence>
					<xs:element name="output" type="wsdl:tParam"/>
					<xs:sequence minOccurs="0">
						<xs:element name="input" type="wsdl:tParam"/>
						<xs:element name="fault" type="wsdl:tFault" minOccurs="0" maxOccurs="unbounded"/>
					</xs:sequence>
				</xs:sequence>
			</xs:group>
			<xs:complexType name="tParam">
				<xs:complexContent>
					<xs:extension base="wsdl:tExtensibleAttributesDocumented">
						<xs:attribute name="name" type="xs:NCName" use="optional"/>
						<xs:attribute name="message" type="xs:QName" use="required"/>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
			<xs:complexType name="tFault">
				<xs:complexContent>
					<xs:extension base="wsdl:tExtensibleAttributesDocumented">
						<xs:attribute name="name" type="xs:NCName" use="required"/>
						<xs:attribute name="message" type="xs:QName" use="required"/>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
			<xs:complexType name="tBinding">
				<xs:complexContent>
					<xs:extension base="wsdl:tExtensibleDocumented">
						<xs:sequence>
							<xs:element name="operation" type="wsdl:tBindingOperation" minOccurs="0" maxOccurs="unbounded"/>
						</xs:sequence>
						<xs:attribute name="name" type="xs:NCName" use="required"/>
						<xs:attribute name="type" type="xs:QName" use="required"/>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
			<xs:complexType name="tBindingOperationMessage">
				<xs:complexContent>
					<xs:extension base="wsdl:tExtensibleDocumented">
						<xs:attribute name="name" type="xs:NCName" use="optional"/>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
			<xs:complexType name="tBindingOperationFault">
				<xs:complexContent>
					<xs:extension base="wsdl:tExtensibleDocumented">
						<xs:attribute name="name" type="xs:NCName" use="required"/>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
			<xs:complexType name="tBindingOperation">
				<xs:complexContent>
					<xs:extension base="wsdl:tExtensibleDocumented">
						<xs:sequence>
							<xs:element name="input" type="wsdl:tBindingOperationMessage" minOccurs="0"/>
							<xs:element name="output" type="wsdl:tBindingOperationMessage" minOccurs="0"/>
							<xs:element name="fault" type="wsdl:tBindingOperationFault" minOccurs="0" maxOccurs="unbounded"/>
						</xs:sequence>
						<xs:attribute name="name" type="xs:NCName" use="required"/>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
			<xs:complexType name="tService">
				<xs:complexContent>
					<xs:extension base="wsdl:tExtensibleDocumented">
						<xs:sequence>
							<xs:element name="port" type="wsdl:tPort" minOccurs="0" maxOccurs="unbounded"/>
						</xs:sequence>
						<xs:attribute name="name" type="xs:NCName" use="required"/>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
			<xs:complexType name="tPort">
				<xs:complexContent>
					<xs:extension base="wsdl:tExtensibleDocumented">
						<xs:attribute name="name" type="xs:NCName" use="required"/>
						<xs:attribute name="binding" type="xs:QName" use="required"/>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
			<xs:attribute name="arrayType" type="xs:string"/>
			<xs:attribute name="required" type="xs:boolean"/>
			<xs:complexType name="tExtensibilityElement" abstract="true">
				<xs:attribute ref="wsdl:required" use="optional"/>
			</xs:complexType>
		</xs:schema>
		<xs:schema xmlns:tns="http://types.sopware.org/service/ServiceDescription/2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" targetNamespace="http://types.sopware.org/service/ServiceDescription/2.0" elementFormDefault="qualified" attributeFormDefault="unqualified">
			<xs:annotation>
				<xs:documentation>
			SOP specific schema extensions of the WSDL  1.1 schema used in the Service Description.
			Constraints tha cannot expressed within XML Schema are specified in a separate document that uses Schematron.
		 </xs:documentation>
			</xs:annotation>
			<xs:import namespace="http://schemas.xmlsoap.org/wsdl/"/>
			<!--	<xs:import namespace="http://types.sopware.org/service/Documentation/1.0"/> -->
			<xs:attribute name="domain" type="xs:string">
				<xs:annotation>
					<xs:documentation>Groups services of a specific business domain.
				May only be added to a portType element.
			</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<!--  -->
			<xs:attribute name="version" type="tns:VersionType">
				<xs:annotation>
					<xs:documentation>Describes the specification version of a service interface and consists
				of a major and minor version number. May only be added to a portType element.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:simpleType name="VersionType">
				<xs:restriction base="xs:string">
					<xs:pattern value="\d+\.\d+"/>
				</xs:restriction>
			</xs:simpleType>
			<!-- -->
			<xs:attribute name="status" type="tns:StatusType">
				<xs:annotation>
					<xs:documentation>Describes in which phase of its life-cycle a service interface stands.
				May only be added to a portType element.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<!-- -->
			<xs:attribute name="partnerPortType" type="xs:QName">
				<xs:annotation>
					<xs:documentation>Reference to the partner portType.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<!-- -->
			<xs:attribute name="partnerOperation" type="xs:NCName">
				<xs:annotation>
					<xs:documentation>Reference to the partner operation.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<!-- -->
			<xs:simpleType name="StatusType">
				<xs:restriction base="xs:string">
					<xs:enumeration value="design"/>
					<xs:enumeration value="test"/>
					<xs:enumeration value="production"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:schema>
		<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://schemas.xmlsoap.org/wsdl/jms/" xmlns:jms="http://schemas.xmlsoap.org/wsdl/jms/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
			<xs:import namespace="http://schemas.xmlsoap.org/wsdl/"/>
			<xs:element name="address" type="jms:addressType"/>
			<xs:complexType name="addressType">
				<xs:annotation>
					<xs:documentation>JMS configuration properties. Used for
						configuring an JMS port. </xs:documentation>
				</xs:annotation>
				<xs:complexContent>
					<xs:extension base="wsdl:tExtensibilityElement">
						<xs:attribute name="destinationStyle" type="jms:destinationStyleType"/>
						<xs:attribute name="jndiProviderURL" type="xs:anyURI"/>
						<xs:attribute name="initialContextFactory" type="xs:string"/>
						<xs:attribute name="jndiConnectionFactoryName" type="xs:string"/>
						<xs:attribute name="jndiDestinationName" type="xs:string"/>
						<!--				<xs:attribute name="messageType" type="jms:messageType_Type" use="required"/> -->
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
			<xs:simpleType name="destinationStyleType">
				<xs:restriction base="xs:string">
					<xs:enumeration value="queue"/>
					<xs:enumeration value="topic"/>
				</xs:restriction>
			</xs:simpleType>
			<xs:simpleType name="messageType_Type">
				<xs:restriction base="xs:string">
					<xs:enumeration value="text"/>
					<xs:enumeration value="binary"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:schema>
		<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" targetNamespace="http://schemas.xmlsoap.org/wsdl/soap/">
			<xs:import namespace="http://schemas.xmlsoap.org/wsdl/"/>
			<xs:simpleType name="encodingStyle">
				<xs:annotation>
					<xs:documentation>
      "encodingStyle" indicates any canonicalization conventions followed in the contents of the containing element.  For example, the value "http://schemas.xmlsoap.org/soap/encoding/" indicates the pattern described in SOAP specification
      </xs:documentation>
				</xs:annotation>
				<xs:list itemType="xs:anyURI"/>
			</xs:simpleType>
			<xs:element name="binding" type="soap:tBinding"/>
			<xs:complexType name="tBinding">
				<xs:complexContent>
					<xs:extension base="wsdl:tExtensibilityElement">
						<xs:attribute name="transport" type="xs:anyURI" use="required"/>
						<xs:attribute name="style" type="soap:tStyleChoice" use="optional"/>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
			<xs:simpleType name="tStyleChoice">
				<xs:restriction base="xs:string">
					<xs:enumeration value="rpc"/>
					<xs:enumeration value="document"/>
				</xs:restriction>
			</xs:simpleType>
			<xs:element name="operation" type="soap:tOperation"/>
			<xs:complexType name="tOperation">
				<xs:complexContent>
					<xs:extension base="wsdl:tExtensibilityElement">
						<xs:attribute name="soapAction" type="xs:anyURI" use="optional"/>
						<xs:attribute name="style" type="soap:tStyleChoice" use="optional"/>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
			<xs:element name="body" type="soap:tBody"/>
			<xs:attributeGroup name="tBodyAttributes">
				<xs:attribute name="encodingStyle" type="soap:encodingStyle" use="optional"/>
				<xs:attribute name="use" type="soap:useChoice" use="optional"/>
				<xs:attribute name="namespace" type="xs:anyURI" use="optional"/>
			</xs:attributeGroup>
			<!-- fix to allow parts attribute to be empty: ASK -->
			<xs:complexType name="tBody">
				<xs:complexContent>
					<xs:extension base="wsdl:tExtensibilityElement">
						<xs:attribute name="parts" type="soap:tParts" use="optional"/>
						<xs:attributeGroup ref="soap:tBodyAttributes"/>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
			<!-- fix to allow parts attribute to be empty: ASK -->
			<xs:simpleType name="tParts">
				<xs:list itemType="xs:NMTOKEN"/>
			</xs:simpleType>
			<xs:simpleType name="useChoice">
				<xs:restriction base="xs:string">
					<xs:enumeration value="literal"/>
					<xs:enumeration value="encoded"/>
				</xs:restriction>
			</xs:simpleType>
			<xs:element name="fault" type="soap:tFault"/>
			<xs:complexType name="tFaultRes" abstract="true">
				<xs:complexContent>
					<xs:restriction base="soap:tBody">
						<xs:attribute ref="wsdl:required" use="optional"/>
						<xs:attribute name="parts" type="xs:NMTOKENS" use="prohibited"/>
						<xs:attributeGroup ref="soap:tBodyAttributes"/>
					</xs:restriction>
				</xs:complexContent>
			</xs:complexType>
			<xs:complexType name="tFault">
				<xs:complexContent>
					<xs:extension base="soap:tFaultRes">
						<xs:attribute name="name" type="xs:NCName" use="required"/>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
			<xs:element name="header" type="soap:tHeader"/>
			<xs:attributeGroup name="tHeaderAttributes">
				<xs:attribute name="message" type="xs:QName" use="required"/>
				<xs:attribute name="part" type="xs:NMTOKEN" use="required"/>
				<xs:attribute name="use" type="soap:useChoice" use="required"/>
				<xs:attribute name="encodingStyle" type="soap:encodingStyle" use="optional"/>
				<xs:attribute name="namespace" type="xs:anyURI" use="optional"/>
			</xs:attributeGroup>
			<xs:complexType name="tHeader">
				<xs:complexContent>
					<xs:extension base="wsdl:tExtensibilityElement">
						<xs:sequence>
							<xs:element ref="soap:headerfault" minOccurs="0" maxOccurs="unbounded"/>
						</xs:sequence>
						<xs:attributeGroup ref="soap:tHeaderAttributes"/>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
			<xs:element name="headerfault" type="soap:tHeaderFault"/>
			<xs:complexType name="tHeaderFault">
				<xs:attributeGroup ref="soap:tHeaderAttributes"/>
			</xs:complexType>
			<xs:element name="address" type="soap:tAddress"/>
			<xs:complexType name="tAddress">
				<xs:complexContent>
					<xs:extension base="wsdl:tExtensibilityElement">
						<xs:attribute name="location" type="xs:anyURI" use="required"/>
					</xs:extension>
				</xs:complexContent>
			</xs:complexType>
		</xs:schema>
		<xsd:schema attributeFormDefault="unqualified" elementFormDefault="qualified" id="uddi" targetNamespace="urn:uddi-org:api_v3" version="1.0" xmlns:uddiv3="urn:uddi-org:api_v3" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
			<!-- 
			Copyright (c) 2000-2002 by Accenture, Ariba, Inc., Commerce One, Inc. 
			Fujitsu Limited, Hewlett-Packard Company, i2 Technologies, Inc., 
			Intel Corporation, International Business Machines Corporation,  
			Microsoft Corporation, Oracle Corporation, SAP AG, Sun Microsystems, Inc., 
			and VeriSign, Inc.  All Rights Reserved.
			
			Copyright (c) OASIS Open 2002-2004. All Rights Reserved.
			-->
			<xsd:annotation>
				<xsd:documentation>subset of the of the original UDDI v3 schema. It
					contain only the elements needed in the Service Registry schema.
					</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType name="uddiKey">
				<xsd:restriction base="xsd:anyURI">
					<xsd:minLength value="1"/>
					<xsd:maxLength value="255"/>
				</xsd:restriction>
			</xsd:simpleType>
			<xsd:simpleType final="restriction" name="bindingKey">
				<xsd:restriction base="uddiv3:uddiKey"/>
			</xsd:simpleType>
			<xsd:simpleType final="restriction" name="businessKey">
				<xsd:restriction base="uddiv3:uddiKey"/>
			</xsd:simpleType>
			<xsd:simpleType final="restriction" name="serviceKey">
				<xsd:restriction base="uddiv3:uddiKey"/>
			</xsd:simpleType>
			<xsd:simpleType final="restriction" name="tModelKey">
				<xsd:restriction base="uddiv3:uddiKey"/>
			</xsd:simpleType>
			<xsd:simpleType final="restriction" name="keyType">
				<xsd:restriction base="xsd:NMTOKEN">
					<xsd:enumeration value="businessKey"/>
					<xsd:enumeration value="tModelKey"/>
					<xsd:enumeration value="serviceKey"/>
					<xsd:enumeration value="bindingKey"/>
					<xsd:enumeration value="subscriptionKey"/>
				</xsd:restriction>
			</xsd:simpleType>
			<xsd:simpleType final="restriction" name="truncated">
				<xsd:restriction base="xsd:boolean"/>
			</xsd:simpleType>
			<xsd:element final="restriction" name="authInfo">
				<xsd:simpleType>
					<xsd:restriction base="xsd:string"/>
				</xsd:simpleType>
			</xsd:element>
			<xsd:element final="restriction" name="serviceKey" type="uddiv3:serviceKey"/>
			<xsd:element final="restriction" name="errInfo" type="uddiv3:errInfo"/>
			<xsd:complexType final="restriction" name="errInfo">
				<xsd:simpleContent>
					<xsd:extension base="xsd:string">
						<xsd:attribute name="errCode" type="xsd:string" use="required"/>
					</xsd:extension>
				</xsd:simpleContent>
			</xsd:complexType>
			<xsd:element final="restriction" name="dispositionReport" type="uddiv3:dispositionReport"/>
			<xsd:complexType final="restriction" name="dispositionReport">
				<xsd:sequence>
					<xsd:element maxOccurs="unbounded" ref="uddiv3:result"/>
				</xsd:sequence>
				<xsd:attribute name="truncated" type="uddiv3:truncated" use="optional"/>
			</xsd:complexType>
			<xsd:element final="restriction" name="result" type="uddiv3:result"/>
			<xsd:complexType final="restriction" name="result">
				<xsd:sequence>
					<xsd:element minOccurs="0" ref="uddiv3:errInfo"/>
				</xsd:sequence>
				<xsd:attribute name="keyType" type="uddiv3:keyType" use="optional"/>
				<xsd:attribute name="errno" type="xsd:int" use="required"/>
			</xsd:complexType>
			<xsd:simpleType name="validationTypeString255">
				<xsd:restriction base="xsd:string">
					<xsd:minLength value="1"/>
					<xsd:maxLength value="255"/>
					<xsd:whiteSpace value="collapse"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:schema>
<!-- 
OASIS takes no position regarding the validity or scope of any intellectual property or other rights that might be claimed to pertain to the implementation or use of the technology described in this document or the extent to which any license under such rights might or might not be available; neither does it represent that it has made any effort to identify any such rights. Information on OASIS's procedures with respect to rights in OASIS specifications can be found at the OASIS website. Copies of claims of rights made available for publication and any assurances of licenses to be made available, or the result of an attempt made to obtain a general license or permission for the use of such proprietary rights by implementors or users of this specification, can be obtained from the OASIS Executive Director.
OASIS invites any interested party to bring to its attention any copyrights, patents or patent applications, or other proprietary rights which may cover technology that may be required to implement this specification. Please address the information to the OASIS Executive Director.
Copyright (C) OASIS Open 2002-2004. All Rights Reserved.
-->
		<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" targetNamespace="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" elementFormDefault="qualified" attributeFormDefault="unqualified" version="0.1">
			<!-- // Fault Codes /////////////////////////////////////////// -->
			<xsd:simpleType name="tTimestampFault">
				<xsd:annotation>
					<xsd:documentation>
This type defines the fault code value for Timestamp message expiration.
          </xsd:documentation>
				</xsd:annotation>
				<xsd:restriction base="xsd:QName">
					<xsd:enumeration value="wsu:MessageExpired"/>
				</xsd:restriction>
			</xsd:simpleType>
			<!-- // Global attributes //////////////////////////////////// -->
			<xsd:attribute name="Id" type="xsd:ID">
				<xsd:annotation>
					<xsd:documentation>
This global attribute supports annotating arbitrary elements with an ID.
          </xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attributeGroup name="commonAtts">
				<xsd:annotation>
					<xsd:documentation>
Convenience attribute group used to simplify this schema.
          </xsd:documentation>
				</xsd:annotation>
				<xsd:attribute ref="wsu:Id" use="optional"/>
				<xsd:anyAttribute namespace="##other" processContents="lax"/>
			</xsd:attributeGroup>
			<!-- // Utility types //////////////////////////////////////// -->
			<xsd:complexType name="AttributedDateTime">
				<xsd:annotation>
					<xsd:documentation>
This type is for elements whose [children] is a psuedo-dateTime and can have arbitrary attributes. 
      </xsd:documentation>
				</xsd:annotation>
				<xsd:simpleContent>
					<xsd:extension base="xsd:string">
						<xsd:attributeGroup ref="wsu:commonAtts"/>
					</xsd:extension>
				</xsd:simpleContent>
			</xsd:complexType>
			<xsd:complexType name="AttributedURI">
				<xsd:annotation>
					<xsd:documentation>
This type is for elements whose [children] is an anyURI and can have arbitrary attributes.
      </xsd:documentation>
				</xsd:annotation>
				<xsd:simpleContent>
					<xsd:extension base="xsd:anyURI">
						<xsd:attributeGroup ref="wsu:commonAtts"/>
					</xsd:extension>
				</xsd:simpleContent>
			</xsd:complexType>
			<!-- // Timestamp header components /////////////////////////// -->
			<xsd:complexType name="TimestampType">
				<xsd:annotation>
					<xsd:documentation>
This complex type ties together the timestamp related elements into a composite type.
            </xsd:documentation>
				</xsd:annotation>
				<xsd:sequence>
					<xsd:element ref="wsu:Created" minOccurs="0"/>
					<xsd:element ref="wsu:Expires" minOccurs="0"/>
					<xsd:choice minOccurs="0" maxOccurs="unbounded">
						<xsd:any namespace="##other" processContents="lax"/>
					</xsd:choice>
				</xsd:sequence>
				<xsd:attributeGroup ref="wsu:commonAtts"/>
			</xsd:complexType>
			<xsd:element name="Timestamp" type="wsu:TimestampType">
				<xsd:annotation>
					<xsd:documentation>
This element allows Timestamps to be applied anywhere element wildcards are present,
including as a SOAP header.
            </xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<!-- global element decls to allow individual elements to appear anywhere -->
			<xsd:element name="Expires" type="wsu:AttributedDateTime">
				<xsd:annotation>
					<xsd:documentation>
This element allows an expiration time to be applied anywhere element wildcards are present.
            </xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Created" type="wsu:AttributedDateTime">
				<xsd:annotation>
					<xsd:documentation>
This element allows a creation time to be applied anywhere element wildcards are present.
            </xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:schema>
		<!-- 
OASIS takes no position regarding the validity or scope of any intellectual property or other rights that might be claimed to pertain to the implementation or use of the technology described in this document or the extent to which any license under such rights might or might not be available; neither does it represent that it has made any effort to identify any such rights. Information on OASIS's procedures with respect to rights in OASIS specifications can be found at the OASIS website. Copies of claims of rights made available for publication and any assurances of licenses to be made available, or the result of an attempt made to obtain a general license or permission for the use of such proprietary rights by implementors or users of this specification, can be obtained from the OASIS Executive Director.
OASIS invites any interested party to bring to its attention any copyrights, patents or patent applications, or other proprietary rights which may cover technology that may be required to implement this specification. Please address the information to the OASIS Executive Director.
Copyright (C) OASIS Open 2002-2004. All Rights Reserved.
-->
		<xsd:schema xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" targetNamespace="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" elementFormDefault="qualified" attributeFormDefault="unqualified" blockDefault="#all" version="0.2">
			<!--  xsd:import namespace="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" schemaLocation="oasis-200401-wss-wssecurity-utility-1.0.xsd"/-->
			<xsd:import namespace="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"/>
			<!--xsd:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="http://www.w3.org/2001/xml.xsd"/-->
			<!--xsd:import namespace="http://www.w3.org/2000/09/xmldsig#" schemaLocation="http://www.w3.org/TR/xmldsig-core/xmldsig-core-schema.xsd"/-->
			<xsd:complexType name="AttributedString">
				<xsd:annotation>
					<xsd:documentation>This type represents an element with arbitrary attributes.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleContent>
					<xsd:extension base="xsd:string">
						<xsd:attribute ref="wsu:Id"/>
						<xsd:anyAttribute namespace="##other" processContents="lax"/>
					</xsd:extension>
				</xsd:simpleContent>
			</xsd:complexType>
			<xsd:complexType name="PasswordString">
				<xsd:annotation>
					<xsd:documentation>This type is used for password elements per Section 4.1.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleContent>
					<xsd:extension base="wsse:AttributedString">
						<xsd:attribute name="Type" type="xsd:anyURI"/>
					</xsd:extension>
				</xsd:simpleContent>
			</xsd:complexType>
			<xsd:complexType name="EncodedString">
				<xsd:annotation>
					<xsd:documentation>This type is used for elements containing stringified binary data.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleContent>
					<xsd:extension base="wsse:AttributedString">
						<xsd:attribute name="EncodingType" type="xsd:anyURI"/>
					</xsd:extension>
				</xsd:simpleContent>
			</xsd:complexType>
			<xsd:complexType name="UsernameTokenType">
				<xsd:annotation>
					<xsd:documentation>This type represents a username token per Section 4.1</xsd:documentation>
				</xsd:annotation>
				<xsd:sequence>
					<xsd:element name="Username" type="wsse:AttributedString"/>
					<xsd:any processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
				<xsd:attribute ref="wsu:Id"/>
				<xsd:anyAttribute namespace="##other" processContents="lax"/>
			</xsd:complexType>
			<xsd:complexType name="BinarySecurityTokenType">
				<xsd:annotation>
					<xsd:documentation>A security token that is encoded in binary</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleContent>
					<xsd:extension base="wsse:EncodedString">
						<xsd:attribute name="ValueType" type="xsd:anyURI"/>
					</xsd:extension>
				</xsd:simpleContent>
			</xsd:complexType>
			<xsd:complexType name="KeyIdentifierType">
				<xsd:annotation>
					<xsd:documentation>A security token key identifier</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleContent>
					<xsd:extension base="wsse:EncodedString">
						<xsd:attribute name="ValueType" type="xsd:anyURI"/>
					</xsd:extension>
				</xsd:simpleContent>
			</xsd:complexType>
			<xsd:simpleType name="tUsage">
				<xsd:annotation>
					<xsd:documentation>Typedef to allow a list of usages (as URIs).</xsd:documentation>
				</xsd:annotation>
				<xsd:list itemType="xsd:anyURI"/>
			</xsd:simpleType>
			<xsd:attribute name="Usage" type="tUsage">
				<xsd:annotation>
					<xsd:documentation>This global attribute is used to indicate the usage of a referenced or indicated token within the containing context</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:complexType name="ReferenceType">
				<xsd:annotation>
					<xsd:documentation>This type represents a reference to an external security token.</xsd:documentation>
				</xsd:annotation>
				<xsd:attribute name="URI" type="xsd:anyURI"/>
				<xsd:attribute name="ValueType" type="xsd:anyURI"/>
				<xsd:anyAttribute namespace="##other" processContents="lax"/>
			</xsd:complexType>
			<xsd:complexType name="EmbeddedType">
				<xsd:annotation>
					<xsd:documentation>This type represents a reference to an embedded security token.</xsd:documentation>
				</xsd:annotation>
				<xsd:choice minOccurs="0" maxOccurs="unbounded">
					<xsd:any processContents="lax"/>
				</xsd:choice>
				<xsd:attribute name="ValueType" type="xsd:anyURI"/>
				<xsd:anyAttribute namespace="##other" processContents="lax"/>
			</xsd:complexType>
			<xsd:complexType name="SecurityTokenReferenceType">
				<xsd:annotation>
					<xsd:documentation>This type is used reference a security token.</xsd:documentation>
				</xsd:annotation>
				<xsd:choice minOccurs="0" maxOccurs="unbounded">
					<xsd:any processContents="lax"/>
				</xsd:choice>
				<xsd:attribute ref="wsu:Id"/>
				<xsd:attribute ref="wsse:Usage"/>
				<xsd:anyAttribute namespace="##other" processContents="lax"/>
			</xsd:complexType>
			<xsd:complexType name="SecurityHeaderType">
				<xsd:annotation>
					<xsd:documentation>This complexType defines header block to use for security-relevant data directed at a specific SOAP actor.</xsd:documentation>
				</xsd:annotation>
				<xsd:sequence>
					<xsd:any processContents="lax" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>The use of "any" is to allow extensibility and different forms of security data.</xsd:documentation>
						</xsd:annotation>
					</xsd:any>
				</xsd:sequence>
				<xsd:anyAttribute namespace="##other" processContents="lax"/>
			</xsd:complexType>
			<xsd:complexType name="TransformationParametersType">
				<xsd:annotation>
					<xsd:documentation>This complexType defines a container for elements to be specified from any namespace as properties/parameters of a DSIG transformation.</xsd:documentation>
				</xsd:annotation>
				<xsd:sequence>
					<xsd:any processContents="lax" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>The use of "any" is to allow extensibility from any namespace.</xsd:documentation>
						</xsd:annotation>
					</xsd:any>
				</xsd:sequence>
				<xsd:anyAttribute namespace="##other" processContents="lax"/>
			</xsd:complexType>
			<xsd:element name="UsernameToken" type="wsse:UsernameTokenType">
				<xsd:annotation>
					<xsd:documentation>This element defines the wsse:UsernameToken element per Section 4.1.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="BinarySecurityToken" type="wsse:BinarySecurityTokenType">
				<xsd:annotation>
					<xsd:documentation>This element defines the wsse:BinarySecurityToken element per Section 4.2.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Reference" type="wsse:ReferenceType">
				<xsd:annotation>
					<xsd:documentation>This element defines a security token reference</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Embedded" type="wsse:EmbeddedType">
				<xsd:annotation>
					<xsd:documentation>This element defines a security token embedded reference</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="KeyIdentifier" type="wsse:KeyIdentifierType">
				<xsd:annotation>
					<xsd:documentation>This element defines a key identifier reference</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="SecurityTokenReference" type="wsse:SecurityTokenReferenceType">
				<xsd:annotation>
					<xsd:documentation>This element defines the wsse:SecurityTokenReference per Section 4.3.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Security" type="wsse:SecurityHeaderType">
				<xsd:annotation>
					<xsd:documentation>This element defines the wsse:Security SOAP header element per Section 4.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="TransformationParameters" type="wsse:TransformationParametersType">
				<xsd:annotation>
					<xsd:documentation>This element contains properties for transformations from any namespace, including DSIG.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Password" type="wsse:PasswordString"/>
			<xsd:element name="Nonce" type="wsse:EncodedString"/>
			<xsd:simpleType name="FaultcodeEnum">
				<xsd:restriction base="xsd:QName">
					<xsd:enumeration value="wsse:UnsupportedSecurityToken"/>
					<xsd:enumeration value="wsse:UnsupportedAlgorithm"/>
					<xsd:enumeration value="wsse:InvalidSecurity"/>
					<xsd:enumeration value="wsse:InvalidSecurityToken"/>
					<xsd:enumeration value="wsse:FailedAuthentication"/>
					<xsd:enumeration value="wsse:FailedCheck"/>
					<xsd:enumeration value="wsse:SecurityTokenUnavailable"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:schema>
		<!--

    W3C XML Schema defined in the Web Services Policy 1.5
    Framework specification

    http://www.w3.org/TR/ws-policy-framework

   Copyright (C) 2006 World Wide Web Consortium,


-->
		<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.w3.org/2006/07/ws-policy" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" targetNamespace="http://www.w3.org/2006/07/ws-policy" elementFormDefault="qualified" attributeFormDefault="unqualified" blockDefault="#all">
			<!-- xs:import namespace="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" schemaLocation="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"/ -->
			<!-- xs:import namespace="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" schemaLocation="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"/ -->
			<xs:import namespace="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"/>
			<xs:import namespace="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" />
			<!-- Constructs from the Web Services Policy 1.5 Framework -->
			<xs:element name="Policy">
				<xs:complexType mixed="false">
					<xs:complexContent mixed="false">
						<xs:extension base="tns:OperatorContentType">
							<xs:attribute name="Name" type="xs:anyURI"/>
							<xs:attribute ref="wsu:Id"/>
							<xs:anyAttribute namespace="##any" processContents="lax"/>
						</xs:extension>
					</xs:complexContent>
				</xs:complexType>
			</xs:element>
			<xs:element name="All" type="tns:OperatorContentType"/>
			<xs:element name="ExactlyOne" type="tns:OperatorContentType"/>
			<xs:complexType name="OperatorContentType" mixed="false">
				<xs:sequence>
					<xs:choice minOccurs="0" maxOccurs="unbounded">
						<xs:element ref="tns:Policy"/>
						<xs:element ref="tns:All"/>
						<xs:element ref="tns:ExactlyOne"/>
						<xs:element ref="tns:PolicyReference"/>
						<xs:any namespace="##other" processContents="lax"/>
					</xs:choice>
				</xs:sequence>
			</xs:complexType>
			<xs:element name="PolicyReference">
				<xs:complexType mixed="false">
					<xs:attribute name="URI" type="xs:anyURI" use="required"/>
					<xs:attribute name="Digest" type="xs:base64Binary"/>
					<xs:attribute name="DigestAlgorithm" type="xs:anyURI" default="http://www.w3.org/2006/07/policy/Sha1Exc"/>
					<xs:anyAttribute namespace="##any" processContents="lax"/>
				</xs:complexType>
			</xs:element>
			<xs:attribute name="Optional" type="xs:boolean" default="false"/>
			<!-- Constructs from the Web Services Policy 1.5 Attachment -->
			<xs:attribute name="PolicyURIs">
				<xs:simpleType>
					<xs:list itemType="xs:anyURI"/>
				</xs:simpleType>
			</xs:attribute>
			<xs:element name="PolicyAttachment">
				<xs:complexType mixed="false">
					<xs:sequence>
						<xs:element ref="tns:AppliesTo"/>
						<xs:choice maxOccurs="unbounded">
							<xs:element ref="tns:Policy"/>
							<xs:element ref="tns:PolicyReference"/>
						</xs:choice>
						<!-- omitted only because it causes the content model to be non-determistic
        <xs:element ref="wsse:Security" minOccurs="0" />
-->
						<xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
					</xs:sequence>
					<xs:anyAttribute namespace="##any" processContents="lax"/>
				</xs:complexType>
			</xs:element>
			<xs:element name="AppliesTo">
				<xs:complexType mixed="false">
					<xs:sequence>
						<xs:any namespace="##any" processContents="lax" maxOccurs="unbounded"/>
					</xs:sequence>
					<xs:anyAttribute namespace="##any" processContents="lax"/>
				</xs:complexType>
			</xs:element>
		</xs:schema>
		<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:wsp="http://www.w3.org/2006/07/ws-policy" xmlns="http://types.sopware.org/qos/ParticipantPolicy/1.1" targetNamespace="http://types.sopware.org/qos/ParticipantPolicy/1.1" elementFormDefault="qualified" attributeFormDefault="unqualified">
			<!-- xs:import namespace="http://www.w3.org/2006/07/ws-policy" schemaLocation="./ws-policy.xsd"/-->
			<xs:import namespace="http://www.w3.org/2006/07/ws-policy"/>
			<xs:element name="ParticipantPolicy" type="ParticipantPolicyType">
				<xs:annotation>
					<xs:documentation>Root element</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:complexType name="ParticipantPolicyType">
				<xs:sequence>
					<xs:element name="DefaultOperation" type="DefaultOperationType" minOccurs="0"/>
					<xs:element name="Operation" type="NamedOperationType" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="service" type="ServiceIdType"/>
				<xs:attribute name="id" type="xs:anyURI"/>
				<xs:attribute name="version" type="xs:string" use="optional"/>
				<xs:attribute name="name" type="xs:string" use="optional"/>
				<xs:attribute name="serviceLocation" type="xs:string" use="optional"/>
				<xs:attribute name="role" type="RoleType" use="optional"/>
			</xs:complexType>
			<xs:complexType name="DefaultOperationType">
				<xs:sequence>
					<xs:element ref="wsp:PolicyReference"/>
				</xs:sequence>
			</xs:complexType>
			<xs:complexType name="NamedOperationType">
				<xs:choice>
					<xs:element ref="wsp:PolicyReference"/>
					<xs:element name="unused"/>
				</xs:choice>
				<xs:attribute name="name" type="xs:NCName"/>
			</xs:complexType>
			<xs:simpleType name="ServiceIdType">
				<xs:restriction base="xs:string">
					<xs:pattern value="\{\w*:.*\}\w*">
						<xs:annotation>
							<xs:documentation>The form should be "{ServiceUri}PorttypeName"</xs:documentation>
						</xs:annotation>
					</xs:pattern>
				</xs:restriction>
			</xs:simpleType>
			<xs:simpleType name="RoleType">
				<xs:restriction base="xs:string">
					<xs:enumeration value="consumer"/>
					<xs:enumeration value="provider"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:schema>
		<xs:schema xmlns="http://types.sopware.org/qos/AgreedPolicy/2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:wsp="http://www.w3.org/2006/07/ws-policy" xmlns:ppol="http://types.sopware.org/qos/ParticipantPolicy/1.1" targetNamespace="http://types.sopware.org/qos/AgreedPolicy/2.0" elementFormDefault="qualified" attributeFormDefault="unqualified">
			<xs:import namespace="http://www.w3.org/2006/07/ws-policy"/>
			<xs:import namespace="http://types.sopware.org/qos/ParticipantPolicy/1.1"/>
			<!-- xs:import namespace="http://www.w3.org/2006/07/ws-policy" schemaLocation="./ws-policy.xsd"/-->
			<!--  xs:import namespace="http://types.sopware.org/qos/ParticipantPolicy/1.1" schemaLocation="./ParticipantPolicy_21.xsd"/-->
			<xs:element name="Agreed" type="AgreedPolicyType">
				<xs:annotation>
					<xs:documentation>Root element</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:complexType name="AgreedPolicyType">
				<xs:sequence>
					<xs:element name="Operation" type="OperationType" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="consumerPolicy" type="xs:anyURI"/>
				<xs:attribute name="providerPolicy" type="xs:anyURI"/>
				<xs:attribute name="service" type="ppol:ServiceIdType"/>
				<xs:attribute name="serviceProvider" type="xs:string"/>
				<xs:attribute name="validSince" type="xs:dateTime"/>
				<xs:attribute name="validThrough" type="xs:dateTime"/>
			</xs:complexType>
			<xs:complexType name="OperationType">
				<xs:sequence>
					<xs:element ref="wsp:Policy"/>
				</xs:sequence>
				<xs:attribute name="name" type="xs:NCName"/>
			</xs:complexType>
		</xs:schema>
		<xsd:schema id="serviceRegistry" xmlns:apol="http://types.sopware.org/qos/AgreedPolicy/2.0" xmlns:ppol="http://types.sopware.org/qos/ParticipantPolicy/1.1" xmlns:sr="http://types.sopware.org/registry/ServiceRegistry/1.0" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" targetNamespace="http://types.sopware.org/registry/ServiceRegistry/1.0" elementFormDefault="qualified" attributeFormDefault="unqualified" version="1.1">
			<xsd:annotation>
				<xsd:documentation>Message types for the Service Registry service.</xsd:documentation>
			</xsd:annotation>
			<!-- import schemas for WSDL, service desc, service instance desc -->
			<xsd:import namespace="http://schemas.xmlsoap.org/wsdl/"/>
			<xsd:import namespace="http://types.sopware.org/qos/ParticipantPolicy/1.1"/>
			<xsd:import namespace="http://types.sopware.org/qos/AgreedPolicy/2.0"/>
			<!--xsd:import namespace="http://types.sopware.org/qos/ParticipantPolicy/1.1" schemaLocation="./ParticipantPolicy_21.xsd"/-->
			<!--xsd:import namespace="http://types.sopware.org/qos/AgreedPolicy/2.0" schemaLocation="./AgreedPolicy_21.xsd"/-->
			<!-- The following is the data types for the service registry extension functions.-->
			<!-- Type and element definitions for registry content -->
			<xsd:simpleType name="validationTypeString255">
				<xsd:restriction base="xsd:string">
					<xsd:minLength value="1"/>
					<xsd:maxLength value="255"/>
					<xsd:whiteSpace value="collapse"/>
				</xsd:restriction>
			</xsd:simpleType>
			<xsd:simpleType name="uddiKey">
				<xsd:restriction base="xsd:anyURI">
					<xsd:maxLength value="255"/>
				</xsd:restriction>
			</xsd:simpleType>
			<xsd:simpleType name="namespace">
				<xsd:restriction base="xsd:string">
					<xsd:maxLength value="255"/>
					<xsd:whiteSpace value="collapse"/>
				</xsd:restriction>
			</xsd:simpleType>
			<xsd:simpleType name="name">
				<xsd:restriction base="sr:validationTypeString255"/>
			</xsd:simpleType>
			<!-- key of an annotation-->
			<xsd:simpleType name="annotationKey">
				<xsd:restriction base="sr:uddiKey"/>
			</xsd:simpleType>
			<!-- Type of annotation: -->
			<xsd:simpleType name="annotationType">
				<xsd:restriction base="xsd:token"/>
			</xsd:simpleType>
			<!-- UDDI items to which annotations may be attached -->
			<xsd:simpleType name="annotateableUddiTypes">
				<xsd:restriction base="xsd:string">
					<xsd:whiteSpace value="collapse"/>
					<xsd:enumeration value="businessEntity"/>
					<xsd:enumeration value="businessService"/>
					<xsd:enumeration value="bindingTemplate"/>
					<xsd:enumeration value="tModel"/>
				</xsd:restriction>
			</xsd:simpleType>
			<xsd:complexType name="uddiKeyWithType">
				<xsd:simpleContent>
					<xsd:extension base="sr:uddiKey">
						<xsd:attribute name="keyType" type="sr:annotateableUddiTypes"/>
					</xsd:extension>
				</xsd:simpleContent>
			</xsd:complexType>
			<xsd:simpleType name="annotationURISuffix">
				<xsd:restriction base="xsd:string">
					<xsd:pattern value="[\w\d]+"/>
				</xsd:restriction>
			</xsd:simpleType>
			<xsd:simpleType name="annotationURI">
				<xsd:restriction base="xsd:anyURI"/>
			</xsd:simpleType>
			<xsd:simpleType name="annotationURL">
				<xsd:restriction base="xsd:anyURI"/>
			</xsd:simpleType>
			<xsd:simpleType name="annotationID">
				<xsd:restriction base="xsd:anyURI"/>
			</xsd:simpleType>
			<xsd:simpleType name="annotationName">
				<xsd:restriction base="xsd:string">
					<xsd:maxLength value="255"/>
					<xsd:whiteSpace value="collapse"/>
				</xsd:restriction>
			</xsd:simpleType>
			<xs:simpleType name="roleType">
				<xs:restriction base="xs:string">
					<xs:enumeration value="service"/>
					<xs:enumeration value="callback"/>
				</xs:restriction>
			</xs:simpleType>
			<xsd:complexType name="summary" final="restriction">
				<xsd:sequence>
					<xsd:element name="URI" type="sr:annotationURI"/>
					<xsd:element name="URL" type="sr:annotationURL"/>
					<xsd:element name="ID" type="sr:annotationID" minOccurs="0"/>
					<xsd:element name="name" type="sr:annotationName" minOccurs="0"/>
					<!--xsd:element name="type" type="sr:annotationType" minOccurs="0"/-->
				</xsd:sequence>
			</xsd:complexType>
			<!-- findQualifiers to drive the search behaviour -->
			<xsd:element name="findQualifiers">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="findQualifier" type="xsd:string" maxOccurs="unbounded"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- XSAVE_WSDL: input -->
			<xsd:element name="xsave_wsdl" type="sr:xsave_wsdl"/>
			<xsd:complexType name="xsave_wsdl" final="restriction">
				<xsd:sequence>
					<xsd:element ref="wsdl:definitions"/>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XSAVE_SERVICEDESCRIPTION: input -->
			<xsd:element name="xsave_serviceDescription" type="sr:xsave_serviceDescription"/>
			<xsd:complexType name="xsave_serviceDescription" final="restriction">
				<xsd:sequence>
					<xsd:element ref="wsdl:definitions"/>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XSAVE_SERVICEPROVIDERDESCRIPTION: input -->
			<xsd:element name="xsave_serviceProviderDescription" type="sr:xsave_serviceProviderDescription"/>
			<xsd:complexType name="xsave_serviceProviderDescription" final="restriction">
				<xsd:sequence>
					<xsd:element ref="wsdl:definitions"/>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XSAVE_ANNOTATION: input -->
			<xsd:element name="xsave_annotation" type="sr:xsave_annotation"/>
			<xsd:complexType name="xsave_annotation" final="restriction">
				<xsd:sequence>
					<xsd:element name="uddiKey" type="sr:uddiKeyWithType"/>
					<xsd:element name="annotationType" type="sr:annotationType"/>
					<xsd:element name="annotationKey" type="sr:annotationKey" minOccurs="0"/>
					<xsd:element ref="sr:annotation"/>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XSAVE_PARTICIPANTPOLICY: input -->
			<xsd:element name="xsave_participantPolicy" type="sr:xsave_participantPolicy"/>
			<xsd:complexType name="xsave_participantPolicy" final="restriction">
				<xsd:sequence>
					<xsd:element name="name" type="sr:name" minOccurs="0"/>
					<xsd:element name="namespace" type="sr:namespace" minOccurs="0"/>
					<xsd:any namespace="##other" processContents="lax"/>
					<!--			<xsd:element ref="sr:annotation"/> -->
				</xsd:sequence>
			</xsd:complexType>
			<!-- XBIND_PARTICIPANTPOLICY: input -->
			<xsd:element name="xbind_participantPolicy" type="sr:xbind_participantPolicy"/>
			<xsd:complexType name="xbind_participantPolicy" final="restriction">
				<xsd:sequence>
					<xsd:element name="name" type="sr:name"/>
					<xsd:element name="namespace" type="sr:namespace"/>
					<xsd:choice>
						<xsd:element name="participantPolicyId" type="xsd:anyURI" maxOccurs="unbounded"/>
						<xsd:element name="URI" type="sr:annotationURI" maxOccurs="unbounded"/>
					</xsd:choice>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XUNBIND_PARTICIPANTPOLICY: input -->
			<xsd:element name="xunbind_participantPolicy" type="sr:xbind_participantPolicy"/>
			<!-- XSAVE_WSPOLICY: input -->
			<xsd:element name="xsave_wsPolicy" type="sr:xsave_wsPolicy"/>
			<xsd:complexType name="xsave_wsPolicy" final="restriction">
				<xsd:sequence>
					<xsd:any namespace="##other" processContents="lax"/>
					<!--			<xsd:element ref="sr:annotation"/>  -->
				</xsd:sequence>
			</xsd:complexType>
			<!-- XFIND_ANNOTATION: input -->
			<xsd:element name="xfind_annotation" type="sr:xfind_annotation"/>
			<xsd:complexType name="xfind_annotation" final="restriction">
				<xsd:sequence>
					<xsd:element name="uddiKey" type="sr:uddiKeyWithType"/>
					<xsd:element name="annotationType" type="sr:annotationType" minOccurs="0"/>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XFIND_PARTICIPANTPOLICY: input -->
			<xsd:element name="xfind_participantPolicy" type="sr:xfind_by_name_and_namespace"/>
			<xsd:complexType name="xfind_by_name_and_namespace" final="restriction">
				<xsd:choice>
					<xsd:sequence>
						<xsd:element name="name" type="sr:name"/>
						<xsd:element name="namespace" type="sr:namespace"/>
					</xsd:sequence>
					<xsd:sequence>
						<xsd:element name="serviceDescriptionName" type="sr:name"/>
						<xsd:element name="serviceDescriptionNamespace" type="sr:namespace"/>
						<xsd:element name="role" type="ppol:RoleType"/>
					</xsd:sequence>
				</xsd:choice>
			</xsd:complexType>
			<!-- XFIND_WSPOLICY: input -->
			<xsd:element name="xfind_wsPolicy" type="sr:xfind_all"/>
			<xsd:complexType name="xfind_all" final="restriction">
				<xsd:sequence>
					<xsd:element name="participantPolicyId" type="xsd:anyURI" minOccurs="0"/>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XFIND_AND_GET_ANNOTATION: input -->
			<xsd:element name="xfind_and_get_annotation" type="sr:xfind_annotation"/>
			<!-- XFIND_AND_GET_PARTICIPANTPOLICY: input -->
			<xsd:element name="xfind_and_get_participantPolicy" type="sr:xfind_by_name_and_namespace"/>
			<!-- XFIND_AND_GET_WSPOLICY: input -->
			<xsd:element name="xfind_and_get_wsPolicy" type="sr:xfind_all"/>
			<!-- XGET_ANNOTATION: input -->
			<xsd:element name="xget_annotation" type="sr:xget_annotation"/>
			<xsd:complexType name="xget_annotation" final="restriction">
				<xsd:sequence>
					<xsd:element name="annotationURI" type="sr:annotationURI"/>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XGET_ANNOTATIONS: input -->
			<xsd:element name="xget_annotations" type="sr:xget_annotations"/>
			<xsd:complexType name="xget_annotations" final="restriction">
				<xsd:sequence>
					<xsd:element name="annotationURI" type="sr:annotationURI" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XGET_PARTICIPANTOLICY: input -->
			<xsd:element name="xget_participantPolicy" type="sr:xget_policy"/>
			<xsd:complexType name="xget_policy" final="restriction">
				<xsd:sequence maxOccurs="unbounded">
					<xsd:choice>
						<xsd:element name="URI" type="sr:annotationURI"/>
						<xsd:element name="ID" type="sr:annotationID"/>
					</xsd:choice>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XGET_WSPOLICY: input -->
			<xsd:element name="xget_wsPolicy" type="sr:xget_policy"/>
			<!-- XGET_WSDL: input -->
			<xsd:element name="xget_wsdl" type="sr:xget_wsdl"/>
			<xsd:complexType name="xget_wsdl" final="restriction">
				<xsd:sequence>
					<xsd:choice>
						<xsd:element name="annotationURI" type="sr:annotationURI"/>
						<xsd:element name="uddiKey" type="sr:uddiKeyWithType"/>
					</xsd:choice>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XFIND_SERVICEDESCRIPTION: input -->
			<xsd:element name="xfind_serviceDescription" type="sr:xfind_serviceDescription"/>
			<xsd:complexType name="xfind_serviceDescription" final="restriction">
				<xsd:sequence>
					<xsd:element name="name" type="sr:name" minOccurs="0"/>
					<xsd:element name="namespace" type="sr:namespace" minOccurs="0"/>
					<xsd:element name="domain" type="xsd:string" minOccurs="0"/>
					<xsd:element name="majorVersionNumber" type="xsd:nonNegativeInteger" minOccurs="0"/>
					<xsd:element name="minorVersionNumber" type="xsd:nonNegativeInteger" minOccurs="0"/>
					<xsd:element name="role" type="sr:roleType" minOccurs="0"/>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XFIND_AND_GET_SERVICEDESCRIPTION: input -->
			<xsd:element name="xfind_and_get_serviceDescription" type="sr:xfind_serviceDescription"/>
			<!-- XGET_SERVICEDESCRIPTION: input -->
			<xsd:element name="xget_serviceDescription" type="sr:xget_serviceDescription"/>
			<xsd:complexType name="xget_serviceDescription" final="restriction">
				<xsd:sequence>
					<xsd:choice>
						<xsd:element name="annotationURI" type="sr:annotationURI"/>
						<xsd:element name="uddiKey" type="sr:uddiKeyWithType"/>
					</xsd:choice>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XFIND_SERVICEPROVIDERDESCRIPTION: input -->
			<xsd:element name="xfind_serviceProviderDescription" type="sr:xfind_serviceProviderDescription"/>
			<xsd:complexType name="xfind_serviceProviderDescription" final="restriction">
				<xsd:sequence>
					<xsd:element name="name" type="sr:name" minOccurs="0"/>
					<xsd:element name="namespace" type="sr:namespace" minOccurs="0"/>
					<xsd:element name="serviceDescriptionName" type="sr:name" minOccurs="0"/>
					<xsd:element name="serviceDescriptionNamespace" type="sr:namespace" minOccurs="0"/>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XFIND_AND_GET_SERVICEPROVIDERDESCRIPTION: input -->
			<xsd:element name="xfind_and_get_serviceProviderDescription" type="sr:xfind_serviceProviderDescription"/>
			<!-- XLOOKUP_SERVICEPROVIDER: input -->
			<xsd:element name="xlookUp_serviceProvider" type="sr:xlookUp_serviceProvider"/>
			<xsd:complexType name="xlookUp_serviceProvider" final="restriction">
				<xsd:sequence>
					<xsd:element name="serviceDescriptionName" type="sr:name"/>
					<xsd:element name="serviceDescriptionNamespace" type="sr:namespace"/>
					<xsd:element name="participantPolicyId" type="xsd:anyURI" minOccurs="0"/>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XFIND_SERVICEPROVIDERS: input -->
			<xsd:element name="xlookUp_serviceProviders" type="sr:xlookUp_serviceProvider"/>
			<!-- XGET_SERVICEPROVIDERDESCRIPTION: input -->
			<xsd:element name="xget_serviceProviderDescription" type="sr:xget_serviceProviderDescription"/>
			<xsd:complexType name="xget_serviceProviderDescription" final="restriction">
				<xsd:sequence>
					<xsd:choice>
						<xsd:element name="annotationURI" type="sr:annotationURI"/>
						<xsd:element name="uddiKey" type="sr:uddiKeyWithType"/>
					</xsd:choice>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XDELETE METHODS - WP2 -->
			<!-- XDELETE_ANNOTATION: input -->
			<xsd:element name="xdelete_annotation" type="sr:xdelete_annotation"/>
			<xsd:complexType name="xdelete_annotation" final="restriction">
				<xsd:sequence>
					<xsd:element name="annotationURI" type="sr:annotationURI"/>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XDELETE_ANNOTATIONS: input -->
			<xsd:element name="xdelete_annotations" type="sr:xdelete_annotations"/>
			<xsd:complexType name="xdelete_annotations" final="restriction">
				<xsd:sequence>
					<xsd:element name="annotationURI" type="sr:annotationURI" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XDELETE_PARTICIPANTPOLICY: input -->
			<xsd:element name="xdelete_participantPolicy" type="sr:xdelete_policy"/>
			<xsd:complexType name="xdelete_policy" final="restriction">
				<xsd:sequence>
					<xsd:choice>
						<xsd:element name="URI" type="sr:annotationURI" maxOccurs="unbounded"/>
						<xsd:element name="ID" type="sr:annotationID" maxOccurs="unbounded"/>
					</xsd:choice>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XDELETE_WSPOLICY: input -->
			<xsd:element name="xdelete_wsPolicy" type="sr:xdelete_policy"/>
			<!-- XDELETE_SERVICEDESCRIPTION: input -->
			<xsd:element name="xdelete_serviceDescription" type="sr:xdelete_serviceDescription"/>
			<xsd:complexType name="xdelete_serviceDescription" final="restriction">
				<xsd:sequence>
					<xsd:element name="annotationURI" type="sr:annotationURI"/>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XDELETE_SERVICEPROVIDERDESCRIPTION: input -->
			<xsd:element name="xdelete_serviceProviderDescription" type="sr:xdelete_serviceProviderDescription"/>
			<xsd:complexType name="xdelete_serviceProviderDescription" final="restriction">
				<xsd:sequence>
					<xsd:element name="annotationURI" type="sr:annotationURI"/>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XDELETE_WSDL: input -->
			<xsd:element name="xdelete_wsdl" type="sr:xdelete_wsdl"/>
			<xsd:complexType name="xdelete_wsdl" final="restriction">
				<xsd:sequence>
					<xsd:element name="annotationURI" type="sr:annotationURI"/>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XFIND_AND_DELETE_SERVICEDESCRIPTION: input -->
			<xsd:element name="xfind_and_delete_serviceDescription" type="sr:xfind_by_name_and_namespace"/>
			<!-- XFIND_AND_DELETE_SERVICEPROVIDERDESCRIPTION: input -->
			<xsd:element name="xfind_and_delete_serviceProviderDescription" type="sr:xfind_by_name_and_namespace"/>
			<!-- CLEAN_STORAGE: input -->
			<xsd:element name="cleanup" type="sr:cleanup"/>
			<xsd:complexType name="cleanup" final="restriction">
				<xsd:sequence/>
			</xsd:complexType>
			<!-- Type and element definitions for response messages -->
			<!-- annotation summary output -->
			<!-- XSAVE_ANNOTATION: output -->
			<xsd:element name="annotationSummary" type="sr:annotationSummary"/>
			<xsd:complexType name="annotationSummary" final="restriction">
				<xsd:sequence>
					<xsd:element name="annotationURI" type="sr:annotationURI"/>
					<xsd:element name="annotationURL" type="sr:annotationURL"/>
					<xsd:element name="annotationID" type="sr:annotationID" minOccurs="0"/>
					<xsd:element name="annotationName" type="sr:annotationName" minOccurs="0"/>
					<xsd:element name="annotationType" type="sr:annotationType" minOccurs="0"/>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XSAVE_PARTICIPANTPOLICY: output -->
			<xsd:element name="participantPolicySummary" type="sr:summary"/>
			<!-- XSAVE_WSPOLICY: output -->
			<xsd:element name="wsPolicySummary" type="sr:summary"/>
			<!-- XSAVE_WSDL: output -->
			<xsd:element name="wsdlContent" type="sr:wsdlContentType"/>
			<xsd:complexType name="wsdlContentType" final="restriction">
				<xsd:sequence>
					<xsd:element ref="sr:annotationSummary"/>
					<xsd:element ref="wsdl:definitions"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:element name="wsdlContentList" type="sr:wsdlContentListType"/>
			<xsd:complexType name="wsdlContentListType" final="restriction">
				<xsd:sequence>
					<!--			<xsd:choice minOccurs="0" maxOccurs="unbounded">  -->
					<xsd:element ref="sr:wsdlContent" minOccurs="0" maxOccurs="unbounded"/>
					<!--				<xsd:element ref="sr:partnerDescriptions" minOccurs="0" maxOccurs="unbounded"/> -->
					<!--			</xsd:choice>  -->
				</xsd:sequence>
			</xsd:complexType>
			<!-- XFIND_ANNOTATION: output -->
			<xsd:element name="annotationSummaryList" type="sr:annotationSummaryList"/>
			<xsd:complexType name="annotationSummaryList" final="restriction">
				<xsd:sequence>
					<xsd:element ref="sr:annotationSummary" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XFIND_AND_GET_ANNOTATION: output -->
			<!-- XGET_ANNOTATIONS: output -->
			<xsd:element name="annotationList" type="sr:annotationList"/>
			<xsd:complexType name="annotationList" final="restriction">
				<xsd:sequence>
					<xsd:element ref="sr:annotationContent" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XFIND_AND_GET_PARTICIPANTPOLICY: output -->
			<!-- XGET_PARTICIPANTPOLICY: output -->
			<xsd:element name="participantPolicyContentList" type="sr:participantPolicyContentList"/>
			<xsd:complexType name="participantPolicyContentList" final="restriction">
				<xsd:sequence>
					<xsd:element name="participantPolicyContent" maxOccurs="unbounded">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element ref="sr:participantPolicySummary"/>
								<xsd:element ref="ppol:ParticipantPolicy"/>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XGET_WSPOLICY: output -->
			<!-- XFIND_AND_GET_WSPOLICY: output -->
			<xsd:element name="wsPolicyContentList" type="sr:wsPolicyContentList"/>
			<xsd:complexType name="wsPolicyContentList" final="restriction">
				<xsd:sequence>
					<xsd:element name="wsPolicyContent" maxOccurs="unbounded">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element ref="sr:wsPolicySummary"/>
								<xsd:any namespace="##any" processContents="skip"/>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XGET_ANNOTATION: output -->
			<!-- XGET_POLICY: output -->
			<!-- XGET_WSPOLICY: output -->
			<xsd:element name="annotationContent" type="sr:annotationContent"/>
			<xsd:complexType name="annotationContent" final="restriction">
				<xsd:sequence>
					<xsd:element ref="sr:annotationSummary"/>
					<xsd:element ref="sr:annotation"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:element name="annotation" type="sr:annotation"/>
			<xsd:complexType name="annotation" final="restriction">
				<xsd:sequence>
					<xsd:any namespace="##other" processContents="lax"/>
				</xsd:sequence>
				<xsd:attribute name="annotationURI" type="sr:annotationURI"/>
			</xsd:complexType>
			<!-- XFIND_SERVICEDESCRIPTION: output -->
			<xsd:element name="serviceDescriptionInfoList" type="sr:serviceDescriptionInfoList"/>
			<xsd:complexType name="serviceDescriptionInfoList" final="restriction">
				<xsd:sequence>
					<xsd:element name="serviceDescriptionInfo" minOccurs="0" maxOccurs="unbounded">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element ref="sr:annotationSummary"/>
								<xsd:element name="name" type="sr:name"/>
								<xsd:element name="namespace" type="sr:namespace"/>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XFIND_SERVICEPROVIDERDESCRIPTION: output -->
			<xsd:element name="serviceProviderDescriptionInfoList" type="sr:serviceProviderDescriptionInfoList"/>
			<xsd:complexType name="serviceProviderDescriptionInfoList" final="restriction">
				<xsd:sequence>
					<xsd:element name="serviceProviderDescriptionInfo" minOccurs="0" maxOccurs="unbounded">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element ref="sr:annotationSummary"/>
								<xsd:element name="name" type="sr:name"/>
								<xsd:element name="namespace" type="sr:namespace"/>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XFIND_PARTICIPANTPOLICY: output -->
			<xsd:element name="participantPolicySummaryList" type="sr:participantPolicySummaryList"/>
			<xsd:complexType name="participantPolicySummaryList" final="restriction">
				<xsd:sequence>
					<xsd:element ref="sr:participantPolicySummary" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XFIND_WSPOLICY: output -->
			<xsd:element name="wsPolicySummaryList" type="sr:wsPolicySummaryList"/>
			<xsd:complexType name="wsPolicySummaryList" final="restriction">
				<xsd:sequence>
					<xsd:element ref="sr:wsPolicySummary" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XLOOKUP_SERVICEPROVIDER: output -->
			<xsd:element name="serviceProviderDetail" type="sr:serviceProviderDetail"/>
			<xsd:complexType name="serviceProviderDetail" final="restriction">
				<xsd:sequence>
					<xsd:element ref="sr:wsdlContent"/>
					<xsd:element name="policyContent" type="sr:policyContent"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="policyContent" final="restriction">
				<xsd:sequence>
					<xsd:element ref="sr:annotationSummary"/>
					<!--			<xsd:element ref="apol:Agreed"/>  -->
					<xsd:any namespace="##other" processContents="lax"/>
				</xsd:sequence>
			</xsd:complexType>
			<!-- XLOOKUP_SERVICEPROVIDERS: output -->
			<xsd:element name="serviceProvidersDetail" type="sr:serviceProvidersDetail"/>
			<xsd:complexType name="serviceProvidersDetail" final="restriction">
				<xsd:sequence>
					<xsd:element name="serviceProviderDetail" type="sr:serviceProviderDetail" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
		</xsd:schema>
	</wsdl:types>
	<message name="xsave_wsdlMessage">
		<documentation>
			<doc:shortDescription>A WSDL 1.1 document to save.</doc:shortDescription>
			<doc:purpose/>
		</documentation>
		<part name="body" element="sr:xsave_wsdl"/>
	</message>
	<message name="xsave_serviceDescriptionMessage">
		<documentation>
			<doc:shortDescription>A service description document to
				save.</doc:shortDescription>
			<doc:purpose/>
		</documentation>
		<part name="body" element="sr:xsave_serviceDescription"/>
	</message>
	<message name="xsave_serviceProviderDescriptionMessage">
		<documentation>
			<doc:shortDescription>A service provider description document to
				save.</doc:shortDescription>
			<doc:purpose/>
		</documentation>
		<part name="body" element="sr:xsave_serviceProviderDescription"/>
	</message>
	<message name="xsave_annotationMessage">
		<documentation>
			<doc:shortDescription>UDDI key: The UDDI item to which the annotation is
				attached is identified by a UDDI key. This must be a key for either a
				businessEntity, a businessService, a bindingTemplate or a tModel.&#xd;
				annotation type: The type of the annotation. Defined by the user. The user
				can use find operations to search for annotations of a particular
				type.&#xd; annotation key: A user-defined key for the annotation
				(optional).&#xd; annotation: The annotation to attach.&#xd;
				&#xd; Note: To attach a policy to a service provider description, use the
				"businessService" UDDI key, the "Policy" annotation type and a
				participant policy as annotation. The "businessService" UDDI key is an
				attribute of the WSDL service element in the response of an
				xsave_serviceProviderDescription call.</doc:shortDescription>
			<doc:purpose>The message contains the UDDI key of a UDDI item to which the
				annotation shall be attached, the annotation itself and
				meta-information.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xsave_annotation"/>
	</message>
	<message name="xsave_participantPolicyMessage">
		<part name="body" element="sr:xsave_participantPolicy"/>
	</message>
	<message name="xbind_participantPolicyMessage">
		<part name="body" element="sr:xbind_participantPolicy"/>
	</message>
	<message name="xunbind_participantPolicyMessage">
		<part name="body" element="sr:xunbind_participantPolicy"/>
	</message>
	<message name="xsave_wsPolicyMessage">
		<documentation>
			<doc:shortDescription>annotation: The annotation of WS Policy.&#xd;</doc:shortDescription>
			<doc:purpose>The message contains the policy itself and meta-information.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xsave_wsPolicy"/>
	</message>
	<message name="xfind_annotationMessage">
		<documentation>
			<doc:shortDescription>UDDI key: The UDDI item to which the annotations are
				attached is identified by a UDDI key. This must be a key for either a
				businessEntity, a businessService, a bindingTemplate or a tModel.&#xd;
				annotation type: The type of the annotations. Defined by the user at the time
				of publishing the annotations. (optional)&#xd;
				&#xd; If annotation type is omitted, all annotations associated with the
				UDDI key are returned. The annotation type can be used to filter the
				result.&#xd; </doc:shortDescription>
			<doc:purpose>The message contains search criteria for finding an
				annotation.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xfind_annotation"/>
	</message>
	<message name="xfind_participantPolicyMessage">
		<documentation>
			<doc:shortDescription>name: The name of service provider description
				to which the policy are attached.&#xd;
				namespace: The namespace of service provider description
				to which the policy are attached.&#xd;</doc:shortDescription>
			<doc:purpose>The message contains search criteria for finding an
				policy.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xfind_participantPolicy"/>
	</message>
	<message name="xfind_wsPolicyMessage">
		<documentation>
			<doc:shortDescription>Empty message.&#xd;</doc:shortDescription>
			<doc:purpose>The empty message for finding all WS policies.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xfind_wsPolicy"/>
	</message>
	<message name="xfind_and_get_annotationMessage">
		<documentation>
			<doc:shortDescription>UDDI key: The UDDI item to which the annotations are
				attached is identified by a UDDI key. This must be a key for either a
				businessEntity, a businessService, a bindingTemplate or a tModel.&#xd;
				annotation type: The type of the annotations. Defined by the user at the time
				of publishing the annotations. (optional)&#xd;
				&#xd; If annotation type is omitted, all annotations associated with the
				UDDI key are returned. The annotation type can be used to filter the
				result.&#xd; </doc:shortDescription>
			<doc:purpose>The message contains search criteria for finding an
				annotation.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xfind_and_get_annotation"/>
	</message>
	<message name="xfind_and_get_participantPolicyMessage">
		<documentation>
			<doc:shortDescription>name: The name of service provider description
				to which the policy are attached.&#xd;
				namespace: The namespace of service provider description
				to which the policy are attached.&#xd;</doc:shortDescription>
			<doc:purpose>The message contains search criteria for finding an
				policy.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xfind_and_get_participantPolicy"/>
	</message>
	<message name="xfind_and_get_wsPolicyMessage">
		<documentation>
			<doc:shortDescription>Empty message.&#xd;</doc:shortDescription>
			<doc:purpose>The empty message for finding and retrieving all 
				WS policies.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xfind_and_get_wsPolicy"/>
	</message>
	<message name="xfind_and_get_serviceDescriptionMessage">
		<documentation>
			<doc:shortDescription>name: The local part of the qualified service name.
				This is the name of the only WSDL portType element in the service
				description. Use % as wildcard.&#xd; namespace: The namespace part of the
				qualified service name. This is the targetNamespace attribute of the WSDL
				definitions element in the service description. Use % as wildcard.&#xd;
				domain: The domain of the qualified service name (optional).&#xd;
				majorVersionNumber: The major version number of the qualified service
				name (optional).&#xd; minorVersionNumber: The minor version number of
				the qualified service name (optional).&#xd; role: The role of service 
				portType in partnerLinkType relations - possible values are "service"
				or "callback" (optional).&#xd; &#xd; Note: As all parameters are optional,
				at least one should be provided in the request. If none are provided, no
				decription can be found.</doc:shortDescription>
			<doc:purpose>The message contains search criteria for finding a service
				description.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xfind_and_get_serviceDescription"/>
	</message>
	<message name="xfind_and_get_serviceProviderDescriptionMessage">
		<documentation>
			<doc:shortDescription>name: The local part of the qualified service provider
				name. This is the name of the only WSDL service element in the service
				provider description (optional). Use % as wildcard.&#xd; namespace: The
				namespace part of the qualified service provider name. This is the
				targetNamespace attribute of the WSDL definitions element in the service
				provider description (optional). Use % as wildcard.&#xd;
				serviceDescriptionName: The local part of the qualified service name.
				This is the name of the only WSDL portType element in the service description
				(optional).&#xd; serviceDescriptionNamespace: The namespace part of
				the qualified service name. This is the targetNamespace attribute of the
				WSDL definitions element in the service description (optional).&#xd;
				</doc:shortDescription>
			<doc:purpose>The message contains search criteria for finding a service
				provider description.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xfind_and_get_serviceProviderDescription"/>
	</message>
	<message name="xlookUp_serviceProviderMessage">
		<documentation>
			<doc:shortDescription>serviceDescriptionName: The local part of the
				qualified service name. This is the name of the only WSDL portType element in
				the service description.&#xd; serviceDescriptionNamespace: The
				namespace part of the qualified service name. This is the targetNamespace
				attribute of the WSDL definitions element in the service
				description.&#xd; ParticipantPolicy: The consumer policy that defines
				the requested quality of service.&#xd; </doc:shortDescription>
			<doc:purpose>The message contains the qualified service name and the consumer
				policy.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xlookUp_serviceProvider"/>
	</message>
	<message name="xlookUp_serviceProvidersMessage">
		<documentation>
			<doc:shortDescription>serviceDescriptionName: The local part of the
				qualified service name. This is the name of the only WSDL portType element in
				the service description.&#xd; serviceDescriptionNamespace: The
				namespace part of the qualified service name. This is the targetNamespace
				attribute of the WSDL definitions element in the service
				description.&#xd; ParticipantPolicy: The consumer policy that defines
				the requested quality of service.&#xd; </doc:shortDescription>
			<doc:purpose>The message contains the qualified service name and the consumer
				policy.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xlookUp_serviceProviders"/>
	</message>
	<message name="serviceProviderDetailMessage">
		<documentation>
			<doc:shortDescription>The annotation URI points to an annotation in the
				Service Registry. When used as input parameter for a xget_annotation
				operation, the published annotation is returned.&#xd; The annotation URL
				points to the actual physical annotation of the published annotation. When
				used in an HTTP / GET request, the published annotation is returned.&#xd;
				The policy is an agreed policy that reflects the result of matching the
				consumer policy against the provider policies. This policy is not stored in
				the service registry, it is computed at runtime. Therefore, the annotation
				URI and URL that comes with the agreed policy point to the provider policy
				that matched with the consumer policy.&#xd; The service provider
				description is the description selected by Service
				Registry.</doc:shortDescription>
			<doc:purpose>The message contains a service provider description and a
				computed policy, as well as the URI and URL of the annotation of the service
				provider description and the provider policy.</doc:purpose>
		</documentation>
		<part name="body" element="sr:serviceProviderDetail"/>
	</message>
	<message name="serviceProvidersDetailMessage">
		<documentation>
			<doc:shortDescription>The annotation URI points to an annotation in the
				Service Registry. When used as input parameter for a xget_annotation
				operation, the published annotation is returned.&#xd; The annotation URL
				points to the actual physical annotation of the published annotation. When
				used in an HTTP / GET request, the published annotation is returned.&#xd;
				The policy is an agreed policy that reflects the result of matching the
				consumer policy against the provider policies. This policy is not stored in
				the service registry, it is computed at runtime. Therefore, the annotation
				URI and URL that comes with the agreed policy point to the provider policy
				that matched with the consumer policy.&#xd;
				&#xd; The service provider descriptions are the descriptions selected by
				Service Registry.&#xd;
				&#xd; The list may be empty.&#xd; </doc:shortDescription>
			<doc:purpose>The message contains a list of service provider descriptions and
				computed policies, as well as the URI and URL of the service provider
				description annotation and the provider policy.</doc:purpose>
		</documentation>
		<part name="body" element="sr:serviceProvidersDetail"/>
	</message>
	<message name="xget_annotationMessage">
		<documentation>
			<doc:shortDescription>The annotation URI points to an annotation in the
				Service Registry. When used as input parameter for a xget_annotation
				operation, the published annotation is
				returned.</doc:shortDescription>
			<doc:purpose>The message contains an annotation URI.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xget_annotation"/>
	</message>
	<message name="xget_participantPolicyMessage">
		<documentation>
			<doc:shortDescription>The annotation URI or annotation ID points
				to an WS policy in the Service Registry. When used as input
				parameter for a xget_Policy operation, the published policy
				is returned.</doc:shortDescription>
			<doc:purpose>The message contains an annotation URI
				or annotation ID.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xget_participantPolicy"/>
	</message>
	<message name="xget_wsPolicyMessage">
		<documentation>
			<doc:shortDescription>The annotation URI or annotation ID points
				to an WS policy in the Service Registry. When used as input
				parameter for a xget_wsPolicy operation, the published policy
				is returned.</doc:shortDescription>
			<doc:purpose>The message contains an annotation URI
				or annotation ID.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xget_wsPolicy"/>
	</message>
	<message name="xget_wsdlMessage">
		<documentation>
			<doc:shortDescription>The annotation URI points to an annotation in the
				Service Registry. When used as input parameter for a xget_annotation
				operation, the published annotation is returned.&#xd; UDDI key: The UDDI
				item to which the annotations are attached is identified by a UDDI key. Key of
				a UDDI businessService that represents a WSDL service
				element.</doc:shortDescription>
			<doc:purpose>The message contains the annotation URI or UDDI
				key.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xget_wsdl"/>
	</message>
	<message name="xget_serviceDescriptionMessage">
		<documentation>
			<doc:shortDescription>The annotation URI points to an annotation in the
				Service Registry. When used as input parameter for a xget_annotation
				operation, the published annotation is returned.&#xd; UDDI key: The UDDI
				item to which the annotations are attached is identified by a UDDI key. Key of
				a UDDI tModel that represents a service description's WSDL portType
				element.</doc:shortDescription>
			<doc:purpose>The message contains the annotation URI or UDDI
				key.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xget_serviceDescription"/>
	</message>
	<message name="xget_serviceProviderDescriptionMessage">
		<documentation>
			<doc:shortDescription>The annotation URI points to an annotation in the
				Service Registry. When used as input parameter for a xget_annotation
				operation, the published annotation is returned.&#xd; UDDI key: The UDDI
				item to which the annotations are attached is identified by a UDDI key. Key of
				a UDDI businessService that represents a service provider description's
				WSDL service element.</doc:shortDescription>
			<doc:purpose>The message contains the annotation URI or UDDI
				key.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xget_serviceProviderDescription"/>
	</message>
	<message name="xfind_serviceDescriptionMessage">
		<documentation>
			<doc:shortDescription>name: The local part of the qualified service
				name.&#xd; This is the name of the only WSDL portType element in the
				service&#xd; description (optional). Use % as wildcard.&#xd; namespace:
				The namespace part of the&#xd; qualified service name. This is the
				targetNamespace attribute of the WSDL&#xd; definitions element in the
				service description (optional). Use % as wildcard.&#xd;&#xd; domain: The
				domain of the qualified service name (optional).&#xd;&#xd;
				majorVersionNumber: The major version number of the qualified
				service&#xd; name (optional).&#xd; minorVersionNumber: The minor
				version number of&#xd; the qualified service name (optional).&#xd;
				role: The role of service portType in partnerLinkType relations -
				possible values are "service" or "callback" (optional).&#xd;
				&#xd; Note: As all parameters are optional, at least one should be
				provided in the request. If none are provided, no decription can be
				found.</doc:shortDescription>
			<doc:purpose>The message contains search criteria for finding a service
				description.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xfind_serviceDescription"/>
	</message>
	<message name="xfind_serviceProviderDescriptionMessage">
		<documentation>
			<doc:shortDescription>name: The local part of the qualified service
				provider&#xd; name. This is the name of the only WSDL service element in the
				service&#xd; provider description (optional). Use % as wildcard.&#xd;
				namespace: The&#xd; namespace part of the qualified service provider
				name. This is the&#xd; targetNamespace attribute of the WSDL definitions
				element in the service&#xd; provider description (optional). Use % as
				wildcard.&#xd;&#xd; serviceDescriptionName: The local part of the
				qualified service name.&#xd; This is the name of the only WSDL portType
				element in the service description&#xd; (optional).&#xd;
				serviceDescriptionNamespace: The namespace part of&#xd; the qualified
				service name. This is the targetNamespace attribute of the&#xd; WSDL
				definitions element in the service description (optional).&#xd;
				&#xd; Note: As all parameters are optional, at least one should be provided
				in the request. If none are provided, no decription can be
				found.</doc:shortDescription>
			<doc:purpose>The message contains search criteria for finding a service
				provider description.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xfind_serviceProviderDescription"/>
	</message>
	<message name="xget_annotationsMessage">
		<documentation>
			<doc:shortDescription>The annotation URI points to an annotation in the
				Service Registry. When used as input parameter for a xget_annotation
				operation, the published annotation is
				returned.</doc:shortDescription>
			<doc:purpose>The message contains a set of annotation URIs.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xget_annotations"/>
	</message>
	<message name="xdelete_annotationMessage">
		<documentation>
			<doc:shortDescription>The annotation URI points to an annotation in the
				Service Registry.</doc:shortDescription>
			<doc:purpose>The message contains an annotation URI.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xdelete_annotation"/>
	</message>
	<message name="xdelete_annotationsMessage">
		<documentation>
			<doc:shortDescription>The annotation URI points to an annotation in the
				Service Registry.</doc:shortDescription>
			<doc:purpose>The message contains a set of annotation URIs.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xdelete_annotations"/>
	</message>
	<message name="xdelete_participantPolicyMessage">
		<documentation>
			<doc:shortDescription>The annotation URI or participant policy ID
				points to an policy in the Service Registry.</doc:shortDescription>
			<doc:purpose>The message contains an annotation URI or
				participant policy ID.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xdelete_participantPolicy"/>
	</message>
	<message name="xdelete_wsPolicyMessage">
		<documentation>
			<doc:shortDescription>The annotation URI or participant policy ID
				points to an WS policy in the Service Registry.</doc:shortDescription>
			<doc:purpose>The message contains an annotation URI or
				participant policy ID.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xdelete_wsPolicy"/>
	</message>
	<message name="xdelete_serviceDescriptionMessage">
		<documentation>
			<doc:shortDescription>The annotation URI points to an annotation in the
				Service Registry.</doc:shortDescription>
			<doc:purpose>The message contains an annotation URI.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xdelete_serviceDescription"/>
	</message>
	<message name="xdelete_serviceProviderDescriptionMessage">
		<documentation>
			<doc:shortDescription>The annotation URI points to an annotation in the
				Service Registry.</doc:shortDescription>
			<doc:purpose>The message contains an annotation URI.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xdelete_serviceProviderDescription"/>
	</message>
	<message name="xdelete_wsdlMessage">
		<documentation>
			<doc:shortDescription>The annotation URI points to an annotation in the
				Service Registry.</doc:shortDescription>
			<doc:purpose>The message contains an annotation URI.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xdelete_wsdl"/>
	</message>
	<message name="xfind_and_delete_serviceDescriptionMessage">
		<documentation>
			<doc:shortDescription>name: The name of service description.&#xd;
				namespace: The namespace of service description.&#xd;</doc:shortDescription>
			<doc:purpose>The message contains search criteria for finding
				and deleting an service description.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xfind_and_delete_serviceDescription"/>
	</message>
	<message name="xfind_and_delete_serviceProviderDescriptionMessage">
		<documentation>
			<doc:shortDescription>name: The name of service provider description.&#xd;
				namespace: The namespace of service provider description.&#xd;</doc:shortDescription>
			<doc:purpose>The message contains search criteria for finding
				and deleting an service provider description.</doc:purpose>
		</documentation>
		<part name="body" element="sr:xfind_and_delete_serviceProviderDescription"/>
	</message>
	<message name="wsdlContentMessage">
		<documentation>
			<doc:shortDescription>The annotation URI points to an annotation in the
				Service Registry containing the published WSDL. When used as input
				parameter for a xget_wsdl operation, the published WSDL is returned. The
				annotation URL points to the actual physical annotation of the published
				WSDL. When used in an HTTP / GET request, the published WSDL is returned. The
				main WSDL elements of the published WSDL, such as porttype, binding,
				service, and port, that led to the creation of UDDI entries are attributed
				with the keys of these corresponding elements.</doc:shortDescription>
			<doc:purpose>The message contains the published WSDL, an annotation URI and an
				annotation URL. Service descriptions and service provider descriptions
				are valid WSDL documents.</doc:purpose>
		</documentation>
		<part name="body" element="sr:wsdlContent"/>
	</message>
	<message name="wsdlContentListMessage">
		<documentation>
			<doc:shortDescription>The annotation URI points to an annotation in the
				Service Registry. When used as input parameter for a xget_annotation
				operation, the published annotation is returned.&#xd; The annotation URL
				points to the actual physical annotation of the published annotation. When
				used in an HTTP / GET request, the published annotation is returned.&#xd;
				The descriptions are embedded in the reponse.&#xd;
				&#xd; The list may be empty.</doc:shortDescription>
			<doc:purpose>The message contains a list of descriptions. Each description
				comes with the URI and URL of the description annotation.</doc:purpose>
		</documentation>
		<part name="body" element="sr:wsdlContentList"/>
	</message>
	<message name="participantPolicyContentListMessage">
		<part name="body" element="sr:participantPolicyContentList"/>
	</message>
	<message name="wsPolicyContentListMessage">
		<part name="body" element="sr:wsPolicyContentList"/>
	</message>
	<message name="serviceDescriptionInfoListMessage">
		<documentation>
			<doc:shortDescription>The annotation URI points to an annotation in the
				Service Registry. When used as input parameter for a xget_annotation
				operation, the published annotation is returned. The annotation URL
				points to the actual physical annotation of the published annotation. When
				used in an HTTP / GET request, the published annotation is returned.&#xd;
				Name and namespace make up the qualified service name.&#xd; The UDDI key
				denotes the UDDI tModel that was associated with the only WSDL portType
				element of the service description at the time of publishing the service
				description.&#xd;
				&#xd; The list may be empty.&#xd; </doc:shortDescription>
			<doc:purpose>The message contains a list of information for a service
				description. Each piece of information consists of the name and namespace
				of the qualified service name, URI and URL of the annotated service
				description, and a UDDI key.</doc:purpose>
		</documentation>
		<part name="body" element="sr:serviceDescriptionInfoList"/>
	</message>
	<message name="serviceProviderDescriptionInfoListMessage">
		<documentation>
			<doc:shortDescription>The annotation URI points to an annotation in the
				Service Registry. When used as input parameter for a xget_annotation
				operation, the published annotation is returned. The annotation URL
				points to the actual physical annotation of the published annotation. When
				used in an HTTP / GET request, the published annotation is returned.&#xd;
				Name and namespace make up the qualified service provider name.&#xd; The
				UDDI key denotes the UDDI businessService that was associated with the only
				WSDL service element of the service provider description at the time of
				publishing the service provider description.&#xd;
				&#xd; The list may be empty.&#xd; </doc:shortDescription>
			<doc:purpose>The message contains a list of information for a service provider
				description. Each piece of information consists of the name and namespace
				of the qualified service provider name, URI and URL of the annotated service
				provider description, and a UDDI key.</doc:purpose>
		</documentation>
		<part name="body" element="sr:serviceProviderDescriptionInfoList"/>
	</message>
	<message name="participantPolicySummaryListMessage">
		<documentation>
			<doc:shortDescription>The annotation URI points to an annotation in the
				Service Registry. When used as input parameter for a xget_annotation
				operation, the published annotation is returned. The annotation URL
				points to the actual physical annotation of the published annotation. When
				used in an HTTP / GET request, the published annotation is returned.&#xd;
				&#xd; The list may be empty.</doc:shortDescription>
			<doc:purpose>The message contains a list of summarizing information for an
				annotation. Each summary consists of an annotation URI and an annotation
				URL.</doc:purpose>
		</documentation>
		<part name="body" element="sr:participantPolicySummaryList"/>
	</message>
	<message name="wsPolicySummaryListMessage">
		<documentation>
			<doc:shortDescription>The annotation URI points to an annotation in the
				Service Registry. When used as input parameter for a xget_annotation
				operation, the published annotation is returned. The annotation URL
				points to the actual physical annotation of the published annotation. When
				used in an HTTP / GET request, the published annotation is returned.&#xd;
				&#xd; The list may be empty.</doc:shortDescription>
			<doc:purpose>The message contains a list of summarizing information for an
				annotation. Each summary consists of an annotation URI and an annotation
				URL.</doc:purpose>
		</documentation>
		<part name="body" element="sr:wsPolicySummaryList"/>
	</message>
	<message name="annotationSummaryMessage">
		<documentation>
			<doc:shortDescription>The annotation URI points to an annotation in the
				Service Registry. When used as input parameter for a xget_annotation
				operation, the published annotation is returned. The annotation URL
				points to the actual physical annotation of the published annotation. When
				used in an HTTP / GET request, the published annotation is returned.&#xd;
				</doc:shortDescription>
			<doc:purpose>The message contains an annotation URI and an annotation
				URL and other annotation meta information.&#xd; </doc:purpose>
		</documentation>
		<part name="body" element="sr:annotationSummary"/>
	</message>
	<message name="annotationSummaryListMessage">
		<documentation>
			<doc:shortDescription>The annotation URI points to an annotation in the
				Service Registry. When used as input parameter for a xget_annotation
				operation, the published annotation is returned. The annotation URL
				points to the actual physical annotation of the published annotation. When
				used in an HTTP / GET request, the published annotation is returned.&#xd;
				&#xd; The list may be empty.</doc:shortDescription>
			<doc:purpose>The message contains a list of summarizing information for an
				annotation. Each summary consists of an annotation URI and an annotation
				URL.</doc:purpose>
		</documentation>
		<part name="body" element="sr:annotationSummaryList"/>
	</message>
	<message name="annotationListMessage">
		<documentation>
			<doc:shortDescription>The annotation URI points to an annotation in the
				Service Registry. When used as input parameter for a xget_annotation
				operation, the published annotation is returned.&#xd; The annotation URL
				points to the actual physical annotation of the published annotation. When
				used in an HTTP / GET request, the published annotation is returned.&#xd;
				The annotations are embedded in the response.&#xd;
				&#xd; The list may be empty.</doc:shortDescription>
			<doc:purpose>The message contains a list of annotations and summarizing
				information for an annotation. Each summary consists of an annotation URI
				and an annotation URL.</doc:purpose>
		</documentation>
		<part name="body" element="sr:annotationList"/>
	</message>
	<message name="annotationContentMessage">
		<documentation>
			<doc:shortDescription>The annotation URI points to an annotation in the
				Service Registry. When used as input parameter for a xget_annotation
				operation, the published annotation is returned.&#xd; The annotation URL
				points to the actual physical annotation of the published annotation. When
				used in an HTTP / GET request, the published annotation is returned.&#xd;
				The annotation is embedded in the response.&#xd;
				</doc:shortDescription>
			<doc:purpose>The message contains an annotation and summarizing
				information. The summary contains the URI and URL of the annotation.&#xd;
				</doc:purpose>
		</documentation>
		<part name="body" element="sr:annotationContent"/>
	</message>
	<message name="successMessage">
		<documentation>
			<doc:shortDescription>The empty message indicates that the operation was
				executed successfully.</doc:shortDescription>
			<doc:purpose>The message is empty.</doc:purpose>
		</documentation>
	</message>
	<message name="dispositionReportFaultMessage">
		<documentation>
			<doc:shortDescription/>
			<doc:purpose>The message contains a UDDI V3 disposition report element. It
				indicates that an error occured while processing the
				request.</doc:purpose>
		</documentation>
		<part name="body" element="uddiv3:dispositionReport"/>
	</message>
	<message name="cleanupMessage">
		<documentation>
			<doc:shortDescription>Cleans the storage of the Service Registry.</doc:shortDescription>
			<doc:purpose/>
		</documentation>
		<part name="body" element="sr:cleanup"/>
	</message>
	<portType name="ServiceRegistry" sdx:domain="registry" sdx:status="production" sdx:version="1.0">
		<documentation>
			<doc:purpose>The service registry service offers functionality to publish
				descriptions about services and service providers, and all types of
				annotations to services and service providers, especially the policies of
				service providers. It also allows to retrieve and delete the descriptions
				and annotations.&#xd; A service description is the interface of a service.
				A service provider description contains endpoint information. Both are
				valid WSDL documents. An annotation is arbitrary XML.&#xd;
				&#xd; </doc:purpose>
			<doc:shortDescription>An annotation is an XML document that can be attached to
				a UDDI item.&#xd; A service description encompasses the definition of the
				operations the service supports, as well as the input / output / fault
				messages of each operation and their message type.&#xd; A service provider
				description defines the service that the provider implements and the
				bindings and transports for each operation.&#xd; Each service provider
				description refers to exactly one service description. Both the service
				description and the service provider description adhere to the WSDL 1.1
				specification. The general term 'WSDL' is used in the documentation of
				messages that contain either a service description, a service provider
				description or a WSDL document.&#xd; A Policy describes the quality of
				service (QoS) of a service provider ("provider policy"), the QoS requested
				by a service consumer ("consumer policy") or the actual QoS negotiated
				between provider and consumer by the service registry ("agreed policy").
				Policies are XML documents and treated as annotations with regard to
				service registry functionality, i.e. they can be published, deleted and
				retrieved using the operations for annotations.&#xd; If an error occurs in
				processing an API call, a dispositionReport element is returned to the
				caller within a SOAP Fault. This element is defined in the UDDI V3
				specification. </doc:shortDescription>
		</documentation>
		<operation name="xsave_wsdl">
			<documentation>
				<doc:shortDescription>Used to publish or update a WSDL document and its
					mapping to UDDI.&#xd; No delete operation is required before
					publishing a WSDL a second time.&#xd; During publishing, an
					annotation containing the WSDL document is automatically attached to
					the corresponding UDDI items.</doc:shortDescription>
				<doc:purpose>The xsave_wsdl API call publishes a WSDL document following
					the OASIS Technical Note for mapping WSDL to UDDI.&#xd; See 'Using WSDL
					in a UDDI Registry, Version 2.0.2' at
					http://www.oasis-open.org/committees/uddi-spec/doc/tn/uddi-spec-tc-tn-wsdl-v202-20040631.htm.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>The WSDL has not been published.</doc:error>
				<doc:success>The WSDL has been published.</doc:success>
			</documentation>
			<input message="tns:xsave_wsdlMessage"/>
			<output message="tns:wsdlContentMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xsave_serviceDescription">
			<documentation>
				<doc:shortDescription>Used to publish or update a service description
					and its mapping to UDDI.&#xd; No delete operation is required before
					publishing a service description a second time.&#xd; During
					publishing, an annotation containing the service description is
					automatically attached to the corresponding UDDI
					items.</doc:shortDescription>
				<doc:purpose>The xsave_serviceDescription API call publishes a service
					description document following the OASIS Technical Note for mapping
					WSDL to UDDI.&#xd; See 'Using WSDL in a UDDI Registry, Version 2.0.2' at
					http://www.oasis-open.org/committees/uddi-spec/doc/tn/uddi-spec-tc-tn-wsdl-v202-20040631.htm.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>The service description has not been published.&#xd; In
					addition to the errors common to all APIs, the following error
					information is relevant here:&#xd;
					&#xd; E_onePortTypeElementExpected: Signifies that the service
					description passed in the request does not have exactly one WSDL
					portType element.</doc:error>
				<doc:success>The service description has been
					published.</doc:success>
			</documentation>
			<input message="tns:xsave_serviceDescriptionMessage"/>
			<output message="tns:wsdlContentMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xsave_serviceProviderDescription">
			<documentation>
				<doc:shortDescription>Used to publish or update a service provider
					description and its mapping to UDDI.&#xd; No delete operation is
					required before publishing a service provider description a second
					time.&#xd; During publishing, an annotation containing the service
					provider description is automatically attached to the corresponding
					UDDI items.</doc:shortDescription>
				<doc:purpose>The xsave_serviceProviderDescription API call publishes
					a service provider description document following the OASIS
					Technical Note for mapping WSDL to UDDI.&#xd; See 'Using WSDL in a UDDI
					Registry, Version 2.0.2' at
					http://www.oasis-open.org/committees/uddi-spec/doc/tn/uddi-spec-tc-tn-wsdl-v202-20040631.htm.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites>The corresponding service description must be
					published before publishing a service provider
					description.</doc:prerequisites>
				<doc:error>The service provider description has not been
					published.&#xd; In addition to the errors common to all APIs, the
					following error information is relevant here:&#xd;
					&#xd; E_oneServiceElementExpected: Signifies that the service
					provider description passed in the request does not have exactly one
					WSDL service element.</doc:error>
				<doc:success>The service provider description has been
					published.</doc:success>
			</documentation>
			<input message="tns:xsave_serviceProviderDescriptionMessage"/>
			<output message="tns:wsdlContentMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xsave_annotation">
			<documentation>
				<doc:shortDescription>Used to attach an annotation of a certain type to a
					UDDI item.&#xd; Use this operation to add a policy to a service provider
					description.&#xd; </doc:shortDescription>
				<doc:purpose>The xsave_annotation API call publishes an annotation and
					associates it with a UDDI item.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites>The UDDI item to which an annotation should be
					attached, must be created first.&#xd; Note: When publishing a policy
					for a service provider description, the UDDI item is automatically
					created by service registry during publication of the service
					provider description.</doc:prerequisites>
				<doc:error>The annotation has not been published. No associations have
					been added to any UDDI item.</doc:error>
				<doc:success>The annotation has been published. The UDDI item has been
					associated with the annotation.</doc:success>
			</documentation>
			<input message="tns:xsave_annotationMessage"/>
			<output message="tns:annotationSummaryMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xsave_participantPolicy">
			<documentation>
				<doc:shortDescription>Used to attach an policy to a service provider
					description.&#xd; </doc:shortDescription>
				<doc:purpose>The xsave_policy API call publishes an policy and
					associates it with a service provider description.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites>The service provider description to which an policy
					should be attached, must be created first.&#xd;</doc:prerequisites>
				<doc:error>The policy has not been published. No associations have
					been added to any UDDI item.</doc:error>
				<doc:success>The policy has been published. The UDDI item has been
					associated with the policy.</doc:success>
			</documentation>
			<input message="tns:xsave_participantPolicyMessage"/>
			<output message="tns:annotationSummaryMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xbind_participantPolicy">
			<input message="tns:xbind_participantPolicyMessage"/>
			<output message="tns:successMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xunbind_participantPolicy">
			<input message="tns:xunbind_participantPolicyMessage"/>
			<output message="tns:successMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xsave_wsPolicy">
			<documentation>
				<doc:shortDescription>Used to store an WS policy in service
					registry.&#xd; </doc:shortDescription>
				<doc:purpose>The xsave_wsPolicy API call publishes
					an WS policy.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>The policy has not been published. No associations have
					been added into service registry.</doc:error>
				<doc:success>The policy has been published.</doc:success>
			</documentation>
			<input message="tns:xsave_wsPolicyMessage"/>
			<output message="tns:annotationSummaryMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xfind_annotation">
			<documentation>
				<doc:shortDescription>Used to find published annotations using a set of
					search criteria.</doc:shortDescription>
				<doc:purpose>The xfind_annotation API call finds annotations that have
					been published in the service registry.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>No effect.</doc:error>
				<doc:success>A list of annotation summaries is returned. The list
					contains information on all annotations that match the search
					criteria. The list may be empty.</doc:success>
			</documentation>
			<input message="tns:xfind_annotationMessage"/>
			<output message="tns:annotationSummaryListMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xfind_participantPolicy">
			<documentation>
				<doc:shortDescription>Used to find published policies using a set
					of search criteria (name and/or namespace of service provider
					description).</doc:shortDescription>
				<doc:purpose>The xfind_policy API call finds policies that have
					been published in the service registry.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>No effect.</doc:error>
				<doc:success>A list of policies summaries is returned. The list
					contains information on all policy that match the search
					criteria. The list may be empty.</doc:success>
			</documentation>
			<input message="tns:xfind_participantPolicyMessage"/>
			<output message="tns:participantPolicySummaryListMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xfind_wsPolicy">
			<documentation>
				<doc:shortDescription>Used to find all published in service
					registry WS policies.</doc:shortDescription>
				<doc:purpose>The xfind_wsPolicy API call finds all WS policies
					that have been published in the service registry.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>No effect.</doc:error>
				<doc:success>A list of WS policies summaries is returned.
					The list contains information on all WS policy in service
					registry. The list may be empty.</doc:success>
			</documentation>
			<input message="tns:xfind_wsPolicyMessage"/>
			<output message="tns:wsPolicySummaryListMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xfind_serviceDescription">
			<documentation>
				<doc:shortDescription>Used to find published service descriptions
					using a set of search criteria.</doc:shortDescription>
				<doc:purpose>The xfind_serviceDescription API call finds service
					descriptions that have been published in the service
					registry.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>No description information is returned.&#xd; In addition to
					the errors common to all APIs, the following error information is
					relevant here:&#xd;
					&#xd; E_fatalError: Signifies that the 'name' parameter had a syntax
					error. To escape the wildcard characters percent (%) and underscore
					(_), a backslash (\) character must be used. To escape a backslash (\)
					character, a backslash (\) character must be used.</doc:error>
				<doc:success>A list of service description information is returned. The
					list contains information on all service descriptions that match the
					search criteria. The list may be empty.</doc:success>
			</documentation>
			<input message="tns:xfind_serviceDescriptionMessage"/>
			<output message="tns:serviceDescriptionInfoListMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xfind_serviceProviderDescription">
			<documentation>
				<doc:shortDescription>Used to find published service provider
					descriptions using a set of search
					criteria.</doc:shortDescription>
				<doc:purpose>The xfind_serviceProviderDescription API call finds
					service provider descriptions that have been published in the service
					registry.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>No description information is returned.&#xd; In addition to
					the errors common to all APIs, the following error information is
					relevant here:&#xd;
					&#xd; E_fatalError: Signifies that the 'name' parameter had a syntax
					error. To escape the wildcard characters percent (%) and underscore
					(_), a backslash (\) character must be used. To escape a backslash (\)
					character, a backslash (\) character must be used.</doc:error>
				<doc:success>A list of service provider description information is
					returned. The list contains information on all service provider
					descriptions that match the search criteria. The list may be
					empty.</doc:success>
			</documentation>
			<input message="tns:xfind_serviceProviderDescriptionMessage"/>
			<output message="tns:serviceProviderDescriptionInfoListMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xlookUp_serviceProvider">
			<documentation>
				<doc:shortDescription>Used to find a matching service provider
					description based on a policy-matching mechanism. Only those service
					providers are considered, whose policy matches the quality of service
					requirements of the consumer.</doc:shortDescription>
				<doc:purpose>The xfind_serviceProvider API call finds a service
					provider description based on policy matching.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>No description and no policy is returned.&#xd; In addition to
					the errors common to all APIs, the following error information&#xd; is
					relevant here:&#xd;&#xd;
					&#xd; E_fatalError: Signifies that the 'name' parameter had a syntax
					error. To escape the wildcard characters percent (%) and underscore
					(_), a backslash (\) character must be used. To escape a backslash (\)
					character, a backslash (\) character must be used.</doc:error>
				<doc:success>A service provider description and a policy is returned. The
					policy defines the quality of service for calls to the service
					provider. The quality of service is computed by the service registry by
					matching the consumer policy against the provider
					policies.</doc:success>
			</documentation>
			<input message="tns:xlookUp_serviceProviderMessage"/>
			<output message="tns:serviceProviderDetailMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xlookUp_serviceProviders">
			<documentation>
				<doc:shortDescription>Used to find matching service provider
					descriptions based on a policy-matching mechanism. Only those
					service providers are considered, whose policy matches the quality of
					service requirements of the consumer.</doc:shortDescription>
				<doc:purpose>The xfind_serviceProviders API call finds service
					provider descriptions based on policy matching.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>No description and no policy is returned.&#xd; In addition to
					the errors common to all APIs, the following error information&#xd; is
					relevant here:&#xd;&#xd;
					&#xd; E_fatalError: Signifies that the 'name' parameter had a syntax
					error. To escape the wildcard characters percent (%) and underscore
					(_), a backslash (\) character must be used. To escape a backslash (\)
					character, a backslash (\) character must be used.</doc:error>
				<doc:success>A list of service provider descriptions and policies is
					returned. For each service provider decription, a policy is provided
					that defines the quality of service for calls to that service provider.
					The quality of service is computed by the service registry by matching
					the consumer policy against the provider policies.&#xd;
					&#xd; The list may be empty.</doc:success>
			</documentation>
			<input message="tns:xlookUp_serviceProvidersMessage"/>
			<output message="tns:serviceProvidersDetailMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xfind_and_get_annotation">
			<documentation>
				<doc:shortDescription>Used to find and get published annotations using a
					set of search criteria.&#xd; Convenience operation. Combines the
					operations xfind_annotation and xget_annotation in a single
					operation.&#xd; </doc:shortDescription>
				<doc:purpose>The xfind_and_get_annotation API call returns
					annotations that have been published in the service
					registry.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>No effect.</doc:error>
				<doc:success>A list of annotations is returned. It contains all
					annotations that match the search criteria. The list may be
					empty.&#xd; </doc:success>
			</documentation>
			<input message="tns:xfind_and_get_annotationMessage"/>
			<output message="tns:annotationListMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xfind_and_get_participantPolicy">
			<documentation>
				<doc:shortDescription>Used to find and get published policy using a
					set of search criteria. (name and/or namespace of service provider
					description)&#xd; Convenience operation. Combines the
					operations xfind_policy and xget_policy in a single
					operation.&#xd; </doc:shortDescription>
				<doc:purpose>The xfind_and_get_policy API call returns
					policies that have been published in the service
					registry.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>No effect.</doc:error>
				<doc:success>A list of policies is returned. It contains all
					policies that match the search criteria. The list may be
					empty.&#xd; </doc:success>
			</documentation>
			<input message="tns:xfind_and_get_participantPolicyMessage"/>
			<output message="tns:participantPolicyContentListMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xfind_and_get_wsPolicy">
			<documentation>
				<doc:shortDescription>Used to find and get all published
					WS policies&#xd; Convenience operation. Combines the
					operations xfind_wsPolicy and xget_wsPolicy in a single
					operation.&#xd; </doc:shortDescription>
				<doc:purpose>The xfind_and_get_wsPolicy API call returns
					all WS policies that have been published in the service
					registry.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>No effect.</doc:error>
				<doc:success>A list of WS policies is returned. It contains
					all WS policies. The list may be empty.&#xd; </doc:success>
			</documentation>
			<input message="tns:xfind_and_get_wsPolicyMessage"/>
			<output message="tns:wsPolicyContentListMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xfind_and_get_serviceDescription">
			<documentation>
				<doc:shortDescription>Used to find and get published service
					descriptions using a set of search criteria.&#xd; Convenience
					operation. Combines the operations xfind_serviceDescription and
					xget_serviceDescription in a single operation.&#xd;
					</doc:shortDescription>
				<doc:purpose>The xfind_and_get_serviceDescription API call returns
					service descriptions that have been published in the service
					registry.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>No description is returned.&#xd; In addition to the errors
					common to all APIs, the following error information&#xd; is relevant
					here:&#xd;&#xd;
					&#xd; E_fatalError: Signifies that the 'name' parameter had a syntax
					error. To escape the wildcard characters percent (%) and underscore
					(_), a backslash (\) character must be used. To escape a backslash (\)
					character, a backslash (\) character must be used.</doc:error>
				<doc:success>A list of service descriptions is returned. It contains all
					service descriptions that match the search criteria. The list may be
					empty.</doc:success>
			</documentation>
			<input message="tns:xfind_and_get_serviceDescriptionMessage"/>
			<output message="tns:wsdlContentListMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xfind_and_get_serviceProviderDescription">
			<documentation>
				<doc:shortDescription>Used to find and get published service provider
					descriptions using a set of search criteria.&#xd; Convenience
					operation. Combines the operations
					xfind_serviceProviderDescription and
					xget_serviceProviderDescription in a single
					operation.</doc:shortDescription>
				<doc:purpose>The xfind_and_get_serviceProviderDescription API call
					returns service provider descriptions that have been published in the
					service registry.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>No description is returned.&#xd; In addition to the errors
					common to all APIs, the following error information&#xd; is relevant
					here:&#xd;&#xd;
					&#xd; E_fatalError: Signifies that the 'name' parameter had a syntax
					error. To escape the wildcard characters percent (%) and underscore
					(_), a backslash (\) character must be used. To escape a backslash (\)
					character, a backslash (\) character must be used.</doc:error>
				<doc:success>A list of service provider descriptions is returned. It
					contains all service provider descriptions that match the search
					criteria. The list may be empty.</doc:success>
			</documentation>
			<input message="tns:xfind_and_get_serviceProviderDescriptionMessage"/>
			<output message="tns:wsdlContentListMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xget_annotation">
			<documentation>
				<doc:shortDescription>Used to get a published annotation using an
					annotation URI.&#xd;
					&#xd; </doc:shortDescription>
				<doc:purpose>The xget_annotation API call returns an annotation that has
					been published in the service registry.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>No annotation is returned.&#xd; In addition to the errors
					common to all APIs, the following error information is relevant
					here:&#xd;
					&#xd; E_invalidAnnotationKeyPassed: Signifies that the
					annotationURI value passed did not match with any known annotationURI
					values.</doc:error>
				<doc:success>An annotation is returned.</doc:success>
			</documentation>
			<input message="tns:xget_annotationMessage"/>
			<output message="tns:annotationContentMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xget_annotations">
			<documentation>
				<doc:shortDescription>Used to get published annotations using
					annotation URIs.&#xd; Convenience operation. Same effect as calling
					xget_annotation for each annotation URI
					individually.</doc:shortDescription>
				<doc:purpose>The xget_annotations API call returns annotations that
					have been published in the service registry.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>No annotation is returned.&#xd; In addition to the errors
					common to all APIs, the following error information is relevant
					here:&#xd;
					&#xd; E_invalidAnnotationKeyPassed: Signifies that the
					annotationURI value passed did not match with any known annotationURI
					values.</doc:error>
				<doc:success>A (non-empty) list of annotations is
					returned.</doc:success>
			</documentation>
			<input message="tns:xget_annotationsMessage"/>
			<output message="tns:annotationListMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xget_participantPolicy">
			<documentation>
				<doc:shortDescription>Used to get a published policy using an
					policy annotation URI or participant policy ID.&#xd;
					&#xd; </doc:shortDescription>
				<doc:purpose>The xget_policy API call returns an policy that has
					been published in the service registry.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>No policy is returned.&#xd; In addition to the errors
					common to all APIs, the following error information is relevant
					here:&#xd;
					&#xd; E_invalidAnnotationKeyPassed: Signifies that the
					annotationURI value passed did not match with any known
					annotationURI values (or annotationID value
					passed did not match any known annotationID
					values.</doc:error>
				<doc:success>An annotation is returned.</doc:success>
			</documentation>
			<input message="tns:xget_participantPolicyMessage"/>
			<output message="tns:participantPolicyContentListMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xget_wsPolicy">
			<documentation>
				<doc:shortDescription>Used to get a published WS policy using
					an policy annotation URI or policy annotation ID.&#xd;
					&#xd; </doc:shortDescription>
				<doc:purpose>The xget_wsPolicy API call returns an policy that
					has been published in the service registry.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>No policy is returned.&#xd; In addition to the errors
					common to all APIs, the following error information is relevant
					here:&#xd;
					&#xd; E_invalidAnnotationKeyPassed: Signifies that the
					annotationURI value passed did not match with any known
					annotationURI values (or annotationID value
					passed did not match any known annotationID
					values.</doc:error>
				<doc:success>An annotation is returned.</doc:success>
			</documentation>
			<input message="tns:xget_wsPolicyMessage"/>
			<output message="tns:wsPolicyContentListMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xget_serviceDescription">
			<documentation>
				<doc:shortDescription>Used to get a published service description using
					an annotation URI or a UDDI key.&#xd; </doc:shortDescription>
				<doc:purpose>The xget_serviceDescription API call returns a service
					description that has been published in the service
					registry.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>No service description is returned.&#xd; In addition to the
					errors common to all APIs, the following error information is relevant
					here:&#xd;
					&#xd; E_invalidAnnotationKeyPassed: Signifies that the
					annotationURI value passed did not match with any known annotationURI
					values.&#xd; E_noValuesAvailable: (40200) Signifies that the UDDI
					item identified by the UDDI key specified in the request is not
					associated with an annotation of type WSDL.</doc:error>
				<doc:success>A service description is returned.</doc:success>
			</documentation>
			<input message="tns:xget_serviceDescriptionMessage"/>
			<output message="tns:wsdlContentMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xget_serviceProviderDescription">
			<documentation>
				<doc:shortDescription>Used to get a published service provider
					description using an annotation URI or a UDDI
					key.</doc:shortDescription>
				<doc:purpose>The xget_serviceProviderDescription API call returns a
					service provider description that has been published in the service
					registry.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>No service provider description is returned.&#xd; In
					addition to the errors common to all APIs, the following error
					information is relevant here:&#xd;
					&#xd; E_invalidAnnotationKeyPassed: Signifies that the
					annotationURI value passed did not match with any known annotationURI
					values.&#xd; E_noValuesAvailable: (40200) Signifies that the UDDI
					item identified by the UDDI key specified in the request is not
					associated with an annotation of type WSDL.</doc:error>
				<doc:success>A service provider description is
					returned.</doc:success>
			</documentation>
			<input message="tns:xget_serviceProviderDescriptionMessage"/>
			<output message="tns:wsdlContentMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xget_wsdl">
			<documentation>
				<doc:shortDescription>Used to get a published WSDL using an annotation
					URI or a UDDI key.</doc:shortDescription>
				<doc:purpose>The xget_wsdl API call returns a WSDL document that has been
					published in the service registry.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>No WSDL document is returned.&#xd; In addition to the errors
					common to all APIs, the following error information is relevant
					here:&#xd;
					&#xd; E_invalidAnnotationKeyPassed: Signifies that the
					annotationURI value passed did not match with any known annotationURI
					values.&#xd; E_noValuesAvailable: (40200) Signifies that the UDDI
					item identified by the UDDI key specified in the request is not
					associated with an annotation of type WSDL.</doc:error>
				<doc:success>A WSDL document is returned.</doc:success>
			</documentation>
			<input message="tns:xget_wsdlMessage"/>
			<output message="tns:wsdlContentMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xdelete_annotation">
			<documentation>
				<doc:shortDescription>Used to delete an annotation.&#xd;
					&#xd; Use this operation to delete a policy.</doc:shortDescription>
				<doc:purpose>The xdelete_annotation API call deletes an annotation that
					has been published in the service registry.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>The annotation has not been deleted.&#xd; In addition to the
					errors common to all APIs, the following error information is relevant
					here:&#xd;
					&#xd; E_valueNotAllowed: (20210) Signifies that a value did not pass
					validation because of contextual issues. The annotationURI
					specified in the request points to a WSDL, service description or
					service provider description, but these should be deleted using the
					operations xdelete_wsdl, xdelete_serviceDescription and
					xdelete_serviceProviderDescription, respectively.&#xd;
					E_invalidAnnotationKeyPassed: Signifies that the annotationURI
					value passed did not match with any known annotationURI values.&#xd;
					</doc:error>
				<doc:success>The annotation has been deleted.</doc:success>
			</documentation>
			<input message="tns:xdelete_annotationMessage"/>
			<output message="tns:successMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xdelete_annotations">
			<documentation>
				<doc:shortDescription>Used to delete annotations.&#xd;
					</doc:shortDescription>
				<doc:purpose>The xdelete_annotations API call deletes annotations that
					have been published in the service registry.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>One or more of the annotations may not have been deleted.&#xd;
					In addition to the errors common to all APIs, the following error
					information is relevant here:&#xd;
					&#xd; E_valueNotAllowed: (20210) Signifies that a value did not pass
					validation because of contextual issues. One of the annotationURIs
					points to a WSDL, service description or service provider
					description, but these should be deleted using the operations
					xdelete_wsdl, xdelete_serviceDescription and
					xdelete_serviceProviderDescription, respectively.&#xd;
					E_invalidAnnotationKeyPassed: Signifies that the annotationURI
					value passed did not match with any known annotationURI values.&#xd;
					</doc:error>
				<doc:success>The annotations have been deleted.</doc:success>
			</documentation>
			<input message="tns:xdelete_annotationsMessage"/>
			<output message="tns:successMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xdelete_participantPolicy">
			<documentation>
				<doc:shortDescription>Used to delete an policy.</doc:shortDescription>
				<doc:purpose>The xdelete_policy API call deletes an policy that
					has been published in the service registry.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>The annotation has not been deleted.&#xd; In addition to the
					errors common to all APIs, the following error information is relevant
					here:&#xd;
					&#xd; E_valueNotAllowed: (20210) Signifies that a value did not pass
					validation because of contextual issues. The annotationURI
					specified in the request points to a WSDL, service description or
					service provider description, but these should be deleted using the
					operations xdelete_wsdl, xdelete_serviceDescription and
					xdelete_serviceProviderDescription, respectively.&#xd;
					E_invalidAnnotationKeyPassed: Signifies that the annotationURI or
					annotationID value passed did not match with any known
					policy annotationURI or annotationIDs values (respectively).
					&#xd;</doc:error>
				<doc:success>The policy has been deleted.</doc:success>
			</documentation>
			<input message="tns:xdelete_participantPolicyMessage"/>
			<output message="tns:successMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xdelete_wsPolicy">
			<documentation>
				<doc:shortDescription>Used to delete an WS policy.</doc:shortDescription>
				<doc:purpose>The xdelete_wsPolicy API call deletes an WS policy that
					has been published in the service registry.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>The annotation has not been deleted.&#xd; In addition to the
					errors common to all APIs, the following error information is relevant
					here:&#xd;
					<!--&#xd; E_valueNotAllowed: (20210) Signifies that a value did not pass
					validation because of contextual issues. The annotationURI
					specified in the request points to a WSDL, service description or
					service provider description, but these should be deleted using the
					operations xdelete_wsdl, xdelete_serviceDescription and
					xdelete_serviceProviderDescription, respectively.&#xd;-->
					E_invalidAnnotationKeyPassed: Signifies that the annotationURI or
					annotationID value passed did not match with any known
					policy annotationURI or annotationIDs values (respectively).
					&#xd;</doc:error>
				<doc:success>The policy has been deleted.</doc:success>
			</documentation>
			<input message="tns:xdelete_wsPolicyMessage"/>
			<output message="tns:successMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xdelete_serviceDescription">
			<documentation>
				<doc:shortDescription>Used to delete a published service
					description.</doc:shortDescription>
				<doc:purpose>The xdelete_serviceDescription API call deletes a service
					description that has been published in the service
					registry.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>The service description has not been deleted.&#xd; In
					addition to the errors common to all APIs, the following error
					information is relevant here:&#xd;
					&#xd; E_invalidAnnotationKeyPassed: Signifies that the
					annotationURI value passed did not match with any known annotationURI
					values.&#xd; </doc:error>
				<doc:success>The service description has been deleted.</doc:success>
			</documentation>
			<input message="tns:xdelete_serviceDescriptionMessage"/>
			<output message="tns:successMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xdelete_serviceProviderDescription">
			<documentation>
				<doc:shortDescription>Used to delete a published service provider
					description.</doc:shortDescription>
				<doc:purpose>The xdelete_serviceProviderDescription API call deletes
					a service provider description that has been published in the service
					registry.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>The service provider description has not been deleted.&#xd;
					In addition to the errors common to all APIs, the following error
					information is relevant here:&#xd;
					&#xd; E_invalidAnnotationKeyPassed: Signifies that the
					annotationURI value passed did not match with any known annotationURI
					values.&#xd; </doc:error>
				<doc:success>The service provider description has been
					deleted.</doc:success>
			</documentation>
			<input message="tns:xdelete_serviceProviderDescriptionMessage"/>
			<output message="tns:successMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xdelete_wsdl">
			<documentation>
				<doc:shortDescription>Used to delete a published
					WSDL.</doc:shortDescription>
				<doc:purpose>The xdelete_wsdl API call deletes a service provider
					description that has been published in the service
					registry.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>If an error occurs in processing this API call, a
					dispositionReport element is returned to the caller within a SOAP
					Fault.&#xd; The WSDL has not been deleted.&#xd; In addition to the
					errors common to all APIs, the following error information is relevant
					here:&#xd;
					&#xd; E_invalidAnnotationKeyPassed: Signifies that the
					annotationURI value passed did not match with any known annotationURI
					values.&#xd; </doc:error>
				<doc:success>The WSDL is deleted.</doc:success>
			</documentation>
			<input message="tns:xdelete_wsdlMessage"/>
			<output message="tns:successMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xfind_and_delete_serviceDescription">
			<documentation>
				<doc:shortDescription>Used to find and delete a published service
					description.</doc:shortDescription>
				<doc:purpose>The xfind_and_delete_serviceDescription API call deletes
					a service description that has been published in the service
					registry.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>The service description has not been deleted.
					&#xd;</doc:error>
				<doc:success>The service description has been deleted.</doc:success>
			</documentation>
			<input message="tns:xfind_and_delete_serviceDescriptionMessage"/>
			<output message="tns:successMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="xfind_and_delete_serviceProviderDescription">
			<documentation>
				<doc:shortDescription>Used to find and delete a published service
					provider description.</doc:shortDescription>
				<doc:purpose>The xfind_and_delete_serviceProviderDescription
					API call deletes a service provider description that has
					been published in the service registry.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error>The service provider description has not been deleted.
					&#xd;</doc:error>
				<doc:success>The service provider description has been deleted.
					</doc:success>
			</documentation>
			<input message="tns:xfind_and_delete_serviceProviderDescriptionMessage"/>
			<output message="tns:successMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
		<operation name="cleanup">
			<documentation>
				<doc:shortDescription>Cleans up defunct annotations in the storage, which are not referenced anymore.</doc:shortDescription>
				<doc:purpose>As the annotation storage and the uddi server are only loosely coupled and because of the data modeling of annotations it can happen that the storage
  contains annotations that are no longer referenced by any item in the uddi server. The operation can be used to find those annotations and to clean them up.</doc:purpose>
				<doc:executionFlow/>
				<doc:prerequisites/>
				<doc:error/>
				<doc:success>Annotations not referenced anymore are deleted from the storage.</doc:success>
			</documentation>
			<input message="tns:cleanupMessage"/>
			<output message="tns:successMessage"/>
			<fault name="error" message="tns:dispositionReportFaultMessage"/>
		</operation>
	</portType>
</wsdl:definitions>
